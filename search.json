[
  {
    "objectID": "notebooks/performance/Fig5_PlantBiophysics_performance.html",
    "href": "notebooks/performance/Fig5_PlantBiophysics_performance.html",
    "title": "PlantBiophysics.jl benchmark",
    "section": "",
    "text": "using Pkg\nPkg.activate(\".\")\n\n  Activating project at `~/Documents/Codes_divers/PlantBiophysics-paper-Quarto/notebooks/performance`\n### A Pluto.jl notebook ###\n# v0.19.23\n\nusing Markdown\nusing InteractiveUtils\nThe main objective of this notebook is to compare the computational times of PlantBiophysics.jl against the plantecophys R package and the LeafGasExchange.jl Julia package from the Cropbox.jl framework. The comparison follows three steps: - create an N-large basis of random conditions. - benchmark the computational time of the three packages via similar functions (i.e. photosynthesis-stomatal conductance-energy balance coupled model for C3 leaves): energy_balance, photosynEB and simulate with ModelC3MD. - compare the results with plots and statistics.\nThis notebook does not perform the benchmark by itself for the obvious reason that it takes forever to run, and because there is an overhead cause by Pluto (benchmark and reactive are not a good mix). Instead, it shows the outputs of a script from this repository that implements the code shown here. If you want to perform the benchmark by yourself, you can run this script from the command line. The versions used for the above dependencies are available in the Project.toml of the repository."
  },
  {
    "objectID": "notebooks/performance/Fig5_PlantBiophysics_performance.html#importing-the-dependencies",
    "href": "notebooks/performance/Fig5_PlantBiophysics_performance.html#importing-the-dependencies",
    "title": "PlantBiophysics.jl benchmark",
    "section": "Importing the dependencies:",
    "text": "Importing the dependencies:\n\nNote\nMake sure to have R installed on your computer first.\nLoading the Julia packages:\nbegin\n    using CairoMakie\n    using BenchmarkTools\n    using PlantBiophysics\n    using Cropbox\n    using LeafGasExchange\n    using RCall\nend\n\nbegin\n    using Statistics\n    using DataFrames\n    using CSV\n    using Random\n    using PlantBiophysics\n    using Downloads\nend"
  },
  {
    "objectID": "notebooks/performance/Fig5_PlantBiophysics_performance.html#parameters",
    "href": "notebooks/performance/Fig5_PlantBiophysics_performance.html#parameters",
    "title": "PlantBiophysics.jl benchmark",
    "section": "Parameters",
    "text": "Parameters\n\nBenchmark parameters\nYou’ll find below the main parameters of the benchmark. In a few words, each package runs a simulation for N different time-steps microbenchmark_steps times repeated microbenchmark_evals times. We make N different simulations because the simulation duration can vary depending on the inputs due to iterative computations in the code, i.e. different initial conditions can make the algorithms converge more or less rapidly.\n\nbegin\n    Random.seed!(1) # Set random seed\n    microbenchmark_steps = 100 # Number of times the microbenchmark is run\n    microbenchmark_evals = 1 # N. times each sample is run to be sure of the output\n    N = 100 # Number of timesteps simulated for each microbenchmark step\nend\n\n\n100\n\n\n\n\nRandom input simulation dataset\nWe create possible ranges for input parameters. These ranges where chosen so all of the three packages don’t return errors during computation (plantecophys has issues with low temperatures).\n\nTa: air temperature (\\(°C\\))\nWind: wind speed (\\(m.s^{-1}\\))\nP: ambient pressure (\\(kPa\\))\nRh: relative humidity (between 0 and 1)\nCa: air CO₂ concentration (\\(ppm\\))\nJmax: potential rate of electron transport (\\(\\mu mol_{CO2}.m^{-2}.s^{-1}\\))\nVmax: maximum rate of Rubisco activity (\\(\\mu mol_{CO2}.m^{-2}.s^{-1}\\))\nRd: mitochondrial respiration in the light at reference temperature (\\(\\mu mol_{CO2}.m^{-2}.s^{-1}\\))\nTPU: triose phosphate utilization-limited photosynthesis rate (\\(\\mu mol_{CO2}.m^{-2}.s^{-1}\\))\nRs: short-wave net radiation (\\(W.m^{-1}\\))\nskyF: Sun-visible fraction of the leaf (between 0 and 1)\nd: characteristic length (\\(m\\))\ng0: residual stomatal conductance (\\(mol_{CO2}.m^{-2}.s^{-1}\\))\ng1: slope of the stomatal conductance relationship.\n\n\nbegin\n    # Create the ranges of input parameters\n    length_range = 10000\n    Rs = range(10, 500, length=length_range)\n    Ta = range(18, 40, length=length_range)\n    Wind = range(0.5, 20, length=length_range)\n    P = range(90, 101, length=length_range)\n    Rh = range(0.1, 0.98, length=length_range)\n    Ca = range(360, 900, length=length_range)\n    skyF = range(0.0, 1.0, length=length_range)\n    d = range(0.001, 0.5, length=length_range)\n    Jmax = range(200.0, 300.0, length=length_range)\n    Vmax = range(150.0, 250.0, length=length_range)\n    Rd = range(0.3, 2.0, length=length_range)\n    TPU = range(5.0, 20.0, length=length_range)\n    g0 = range(0.001, 2.0, length=length_range)\n    g1 = range(0.5, 15.0, length=length_range)\n    vars = hcat([Ta, Wind, P, Rh, Ca, Jmax, Vmax, Rd, Rs, skyF, d, TPU, g0, g1])\n    nothing\nend\n\n\nWe then sample N conditions from the given ranges:\n\nbegin\n    set = [rand.(vars) for i = 1:N]\n    set = reshape(vcat(set...), (length(set[1]), length(set)))'\n    name = [\n        \"T\",\n        \"Wind\",\n        \"P\",\n        \"Rh\",\n        \"Ca\",\n        \"JMaxRef\",\n        \"VcMaxRef\",\n        \"RdRef\",\n        \"Rs\",\n        \"sky_fraction\",\n        \"d\",\n        \"TPURef\",\n        \"g0\",\n        \"g1\",\n    ]\n    set = DataFrame(set, name)\n    @. set[!, :vpd] = e_sat(set.T) - vapor_pressure(set.T, set.Rh)\n    @. set[!, :PPFD] = set.Rs * 0.48 * 4.57\n    set\nend\n\n\n100 rows × 16 columns (omitted printing of 7 columns)\n\n\n\n\nT\nWind\nP\nRh\nCa\nJMaxRef\nVcMaxRef\nRdRef\nRs\n\n\n\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\n\n\n\n\n1\n19.6128\n7.31008\n97.6876\n0.652871\n854.095\n219.282\n227.018\n1.62698\n338.431\n\n\n2\n30.4752\n12.5113\n92.1529\n0.110913\n528.443\n211.471\n204.605\n1.35955\n142.705\n\n\n3\n37.0693\n14.7462\n94.7316\n0.466029\n793.393\n266.147\n184.753\n1.6229\n106.442\n\n\n4\n36.1958\n8.21692\n94.8086\n0.20033\n392.997\n296.88\n177.223\n1.36686\n346.517\n\n\n5\n32.6337\n13.8159\n99.9659\n0.806623\n781.134\n263.616\n161.891\n0.987039\n306.333\n\n\n6\n39.8042\n16.0392\n90.4884\n0.45714\n750.567\n283.968\n157.291\n1.71964\n491.522\n\n\n7\n18.0286\n15.1148\n93.7844\n0.863036\n493.015\n242.564\n199.045\n0.894889\n453.445\n\n\n8\n36.3454\n19.6451\n91.8372\n0.733399\n496.796\n205.461\n186.324\n1.36669\n436.637\n\n\n9\n31.2409\n9.08476\n97.363\n0.266161\n436.04\n240.004\n182.193\n0.820252\n423.356\n\n\n10\n33.1925\n7.73132\n100.956\n0.132739\n798.2\n211.701\n232.558\n1.32384\n96.2486\n\n\n11\n28.7393\n14.0909\n97.7217\n0.24231\n372.637\n263.636\n201.805\n0.971057\n400.226\n\n\n12\n27.4323\n7.70597\n92.0979\n0.376172\n864.032\n274.717\n180.683\n1.80363\n459.473\n\n\n13\n23.626\n12.521\n96.6172\n0.248559\n400.234\n210.501\n209.596\n1.68615\n282.761\n\n\n14\n39.5578\n17.7885\n95.0044\n0.227525\n691.269\n256.276\n178.803\n1.75025\n494.462\n\n\n15\n27.6612\n5.43984\n93.9747\n0.418416\n826.769\n268.607\n247.65\n1.51987\n348.134\n\n\n16\n38.8031\n10.8867\n99.5402\n0.903608\n582.394\n246.045\n200.665\n1.88575\n297.316\n\n\n17\n26.6843\n9.84143\n97.2519\n0.680066\n532.277\n206.881\n210.466\n1.13461\n243.802\n\n\n18\n29.8174\n14.6701\n100.152\n0.85714\n767.093\n274.637\n155.971\n1.45017\n424.777\n\n\n19\n19.9098\n4.35749\n91.4455\n0.644862\n645.635\n229.783\n155.911\n0.349305\n210.626\n\n\n20\n28.5743\n18.0167\n94.2816\n0.772739\n372.043\n212.111\n241.699\n0.50164\n290.259\n\n\n21\n28.9043\n7.9946\n96.4862\n0.523498\n600.918\n212.031\n181.823\n1.40664\n334.02\n\n\n22\n27.3553\n12.5756\n94.3322\n0.70286\n760.99\n216.232\n181.453\n1.74922\n301.383\n\n\n23\n24.5809\n12.131\n95.0902\n0.417536\n763.366\n241.324\n219.377\n1.52055\n420.465\n\n\n24\n18.7789\n9.31683\n94.9901\n0.601122\n702.448\n234.173\n228.868\n0.369197\n122.123\n\n\n25\n20.5369\n9.24857\n93.0902\n0.598746\n636.886\n257.476\n241.159\n0.80325\n173.431\n\n\n26\n28.7855\n17.1449\n97.9329\n0.955446\n494.257\n259.106\n166.022\n1.26655\n26.4166\n\n\n27\n27.8108\n16.8953\n91.6469\n0.773091\n850.693\n211.641\n167.842\n0.705151\n214.35\n\n\n28\n32.3828\n6.9688\n92.4026\n0.823608\n682.574\n299.8\n236.049\n0.40337\n182.987\n\n\n29\n22.7877\n14.6682\n90.1067\n0.118834\n753.105\n252.545\n210.746\n1.18188\n269.922\n\n\n30\n38.3916\n1.54335\n93.0759\n0.132211\n724.698\n230.903\n181.053\n0.357806\n108.745\n\n\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮"
  },
  {
    "objectID": "notebooks/performance/Fig5_PlantBiophysics_performance.html#benchmarking",
    "href": "notebooks/performance/Fig5_PlantBiophysics_performance.html#benchmarking",
    "title": "PlantBiophysics.jl benchmark",
    "section": "Benchmarking",
    "text": "Benchmarking\n\nplantecophys\nPreparing R to make the benchmark:\nR\\\"\\\"\\\"\nif(!require(\"plantecophys\")){\n    install.packages(\"plantecophys\", repos = \"https://cloud.r-project.org\")\n}\nif(!require(\"microbenchmark\")){\n    install.packages(\"microbenchmark\", repos = \"https://cloud.r-project.org\")\n}\n\\\"\\\"\\\"\n\n# Make variables available to the R session\n@rput set N microbenchmark_steps\nMaking the benchmark:\nR\\\"\\\"\\\"\n# Define the function call in a function that takes a list as input to limit DataFrame overhead\nfunction_EB &lt;- function(input) {\n    PhotosynEB(\n        Tair = input$Tair, VPD = input$VPD, Wind = input$Wind,\n        Wleaf = input$Wleaf,Ca = input$Ca,  StomatalRatio = 1,\n        LeafAbs = input$LeafAbs, gsmodel = \"BBOpti\", g0 = input$g0, g1 = input$g1,\n        alpha = 0.24, theta = 0.7, Jmax = input$Jmax,\n        Vcmax = input$Vcmax, TPU = input$TPU, Rd = input$Rd,\n        RH = input$RH, PPFD=input$PPFD, Patm = input$Patm\n    )\n}\n\ntime_PE = c()\nfor(i in seq_len(N)){\n    # Put the inputs into a vector to limit dataframe overhead:\n    input = list(\n        Tair = set$T[i], VPD = set$vpd[i], Wind = set$Wind[i], Wleaf = set$d[i],\n        Ca = set$Ca[i], LeafAbs = set$sky_fraction[i], g0 = set$g0[i], g1 = set$g1[i],\n        Jmax = set$JMaxRef[i], Vcmax = set$VcMaxRef[i], TPU = set$TPURef[i],\n        Rd = set$RdRef[i], RH = set$Rh[i]*100, PPFD=set$PPFD[i],Patm = set$P[i]\n    )\n\n    m = microbenchmark(function_EB(input), times = microbenchmark_steps)\n\n    time_PE = append(time_PE,m$time * 10e-9) # transform in seconds\n}\n\\\"\\\"\\\"\n\n@rget time_PE\n\n\nLeafGasExchange.jl\nNote that we benchmark LeafGasExchange.jl with the nounit flag to compute a fair comparison with PlantBiophysics.jl in case computing units takes time (it shouldn’t much).\ntime_LG = []\nn_lg = fill(0, N)\nfor i = 1:N\n    config =\n        :Weather =&gt; (\n            PFD=set.PPFD[i],\n            CO2=set.Ca[i],\n            RH=set.Rh[i] * 100,\n            T_air=set.T[i],\n            wind=set.Wind[i],\n            P_air=set.P[i],\n            g0=set.g0[i],\n            g1=set.g1[i],\n            Vcmax=set.VcMaxRef[i],\n            Jmax=set.JMaxRef[i],\n            Rd=set.RdRef[i],\n            TPU=set.TPURef[i],\n        )\n    b_LG =\n        @benchmark simulate($ModelC3MD; config=$config) evals = microbenchmark_evals samples =\n            microbenchmark_steps\n    append!(time_LG, b_LG.times .* 1e-9) # transform in seconds\n    n_lg[i] = 1\nend\n\n\nPlantBiophysics.jl\nBenchmarking PlantBiophysics.jl:\nconstants = Constants()\ntime_PB = []\nfor i = 1:N\n    leaf = ModelList(\n        energy_balance=Monteith(),\n        photosynthesis=Fvcb(\n            VcMaxRef=set.VcMaxRef[i],\n            JMaxRef=set.JMaxRef[i],\n            RdRef=set.RdRef[i],\n            TPURef=set.TPURef[i],\n        ),\n        stomatal_conductance=Medlyn(set.g0[i], set.g1[i]),\n        status=(\n            Rₛ=set.Rs[i],\n            sky_fraction=set.sky_fraction[i],\n            PPFD=set.PPFD[i],\n            d=set.d[i],\n        ),\n    )\n    deps = PlantSimEngine.dep(leaf)\n    meteo = Atmosphere(T=set.T[i], Wind=set.Wind[i], P=set.P[i], Rh=set.Rh[i], Cₐ=set.Ca[i])\n    st = PlantMeteo.row_struct(leaf.status[1])\n    b_PB = @benchmark run!($leaf, $deps, $st, $meteo, $constants, nothing) evals =\n        microbenchmark_evals samples = microbenchmark_steps\n    append!(time_PB, b_PB.times .* 1e-9) # transform in seconds\nend"
  },
  {
    "objectID": "notebooks/performance/Fig5_PlantBiophysics_performance.html#comparison",
    "href": "notebooks/performance/Fig5_PlantBiophysics_performance.html#comparison",
    "title": "PlantBiophysics.jl benchmark",
    "section": "Comparison",
    "text": "Comparison\n\nStatistics\nWe compute here basic statistics, i.e. mean, median, min, max, standard deviation.\nstatsPB = basic_stat(time_PB)\nstatsPE = basic_stat(time_PE)\nstatsLG = basic_stat(time_LG)\n\nfactorPE = mean(time_PE) / mean(time_PB)\nfactorLG = mean(time_LG) / mean(time_PB)\n\n# Write overall timings:\ndf = DataFrame(\n    [getfield(j, i) for i in fieldnames(StatResults), j in [statsPB, statsPE, statsLG]],\n    [\"PlantBiophysics\", \"plantecophys\", \"LeafGasExchange\"]\n)\ninsertcols!(df, 1, :Stat =&gt; [fieldnames(StatResults)...])\nCSV.write(\"benchmark.csv\", df)\n\n# Write timing for each sample:\nCSV.write(\"benchmark_full.csv\",\n    DataFrame(\n        \"package\" =&gt; vcat(\n            [\n                repeat([i.first], length(i.second)) for i in [\n                    \"PlantBiophysics\" =&gt; time_PB,\n                    \"plantecophys\" =&gt; time_PE,\n                    \"LeafGasExchange\" =&gt; time_LG\n                ]\n            ]...\n        ),\n        \"sample_time\" =&gt; vcat(time_PB, time_PE, time_LG)\n    )\n)\n\ndf_res = CSV.read(Downloads.download(\"https://raw.githubusercontent.com/VEZY/PlantBiophysics-paper/main/notebooks/performance/benchmark.csv\"), DataFrame)\n\n\n5 rows × 4 columns\n\n\n\n\nStat\nPlantBiophysics\nplantecophys\nLeafGasExchange\n\n\n\nString7\nFloat64\nFloat64\nFloat64\n\n\n\n\n1\nmean\n1.21661e-6\n0.0470207\n0.0226825\n\n\n2\nmedian\n1.083e-6\n0.04569\n0.0214673\n\n\n3\nstddev\n1.20394e-6\n0.00808695\n0.0047238\n\n\n4\nmin\n5.41e-7\n0.0346401\n0.0192761\n\n\n5\nmax\n2.5e-5\n0.172202\n0.12373\n\n\n\n\n\n\n\n\nHistogram plotting\n\n\"\"\"\n    StatResults(\n        mean::AbstractFloat\n        median::AbstractFloat\n        stddev::AbstractFloat\n        min::AbstractFloat\n        max::AbstractFloat\n    )\n\nStructure to hold basic statistics of model performance.\n\"\"\"\nstruct StatResults\n    mean::AbstractFloat\n    median::AbstractFloat\n    stddev::AbstractFloat\n    min::AbstractFloat\n    max::AbstractFloat\nend\n\n\nStatResults\n\n\n**Base.show**\n\n    Base.show(io::IO, m::StatResults)\n    Base.show(io::IO, ::MIME\"text/plain\", m::StatResults)\n\nAdd a show method for our `StatResults` type.\n\n\"\"\"\n    basic_stat(df)\n\nCompute basic statistics from the benchmarking\n\"\"\"\nfunction basic_stat(df)\n    m = mean(df)\n    med = median(df)\n    std = Statistics.std(df)\n    min = findmin(df)[1]\n    max = findmax(df)[1]\n    return StatResults(m, med, std, min, max)\nend\n\n\nbasic_stat\n\n\n\nfunction plot_benchmark_Makie(statsPB, statsPE, statsLG, time_PB, time_PE, time_LG)\n    size_inches = (6.7, 5)\n    size_pt = 72 .* size_inches\n    bins = 220\n    noto_sans = assetpath(\"fonts\", \"NotoSans-Regular.ttf\")\n    fig = Figure(\n        backgroundcolor=RGBf(1, 1, 1),\n        resolution=size_pt,\n        font=noto_sans,\n        fontsize=10,\n    )\n    ep = 1e-9\n    extr = extrema(vcat(time_PB, time_PE, time_LG))\n    interval = (extr[1] * 1e-1, extr[2])\n\n    ga = fig[1, 1] = GridLayout()\n\n    axa = Axis(\n        ga[1, 1],\n        title=\"(a) PlantBiophysics.jl\",\n        xscale=log10,\n        titlealign=:left,\n        titlesize=10,\n    )\n    stddevi = poly!(\n        axa,\n        Rect(max(ep, statsPB.mean - statsPB.stddev), 0.0, 2 * statsPB.stddev, 1),\n        color=(:orange, 0.3),\n        yautolimits=false,\n    )\n    moy = vlines!(axa, statsPB.mean; color=:red, linewidth=3, linestyle=:dot)\n    hist!(axa, time_PB, normalization=:probability, bins=bins)\n    # h = axa.finallimits[].widths[2]\n    axislegend(\n        axa,\n        [stddevi, moy],\n        [\"95% confidence interval\", \"Mean\"],\n        \"\",\n        position=:rb,\n        orientation=:vertical,\n        labelsize=8,\n        framevisible=false,\n    )\n    xlims!(axa, interval)\n\n    axb = Axis(\n        ga[2, 1],\n        title=\"(b) plantecophys\",\n        xscale=log10,\n        ylabel=\"Density\",\n        titlealign=:left,\n        titlesize=10,\n    )\n    stddevi = poly!(\n        axb,\n        Rect(statsPE.mean - statsPE.stddev, 0.0, 2 * statsPE.stddev, 1),\n        color=(:orange, 0.3),\n        yautolimits=false,\n    )\n    vlines!(axb, statsPE.mean; color=:red, linewidth=3, linestyle=:dot)\n    hist!(axb, time_PE, normalization=:probability, bins=bins)\n    xlims!(axb, interval)\n\n    # axc = Axis(ga[3, 1], title=\"(c) LeafGasExchange.jl\", yminorticks=IntervalsBetween(10),\n    #     xscale=log10, xminorticks=IntervalsBetween(10), yminorgridvisible=true, yminorticksvisible=true,\n    #     xminorgridvisible=true, xminorticksvisible=true, xlabel=\"Time (s)\")\n    axc = Axis(\n        ga[3, 1],\n        title=\"(c) LeafGasExchange.jl\",\n        xscale=log10,\n        xlabel=\"Time (s)\",\n        titlealign=:left,\n        titlesize=10,\n    )\n    stddevi = poly!(\n        axc,\n        Rect(statsLG.mean - statsLG.stddev, 0.0, 2 * statsLG.stddev, 1),\n        color=(:orange, 0.3),\n        yautolimits=false,\n    )\n    vlines!(axc, statsLG.mean; color=:red, linewidth=3, linestyle=:dot)\n    hist!(axc, time_LG, normalization=:probability, bins=bins)\n    xlims!(axc, interval)\n\n    rowgap!(ga, 7)\n    hidexdecorations!(axa, grid=false)\n    hidexdecorations!(axb, grid=false)\n    fig\nend\n\n\nplot_benchmark_Makie (generic function with 1 method)\n\n\nWe here display the computational time histogram of each package on the same scale in order to compare them: PlantBiophysics.jl (a), plantecophys (b) and LeafGasExchange.jl (c). The y-axis represents the density (i.e. reaching 0.3 means that 30% of the computed times are in this bar). Orange zone represents the interval [mean - standard deviation; mean + standard deviation]. Red dashed line represents the mean. Note that the x-axis is logarithmic.\nfig = plot_benchmark_Makie(statsPB, statsPE, statsLG, time_PB, time_PE, time_LG)\nsave(\"benchmark_each_time_steps.png\", fig, px_per_unit=3)\n\n\n:memo: Note  PlantBiophysics.jl is $(Int(round(df_res[1,:plantecophys] / df_res[1,:PlantBiophysics]))) times faster than plantecophys, and $(Int(round(df_res[1,:LeafGasExchange] / df_res[1,:PlantBiophysics]))) times faster than LeafGasExchange.jl.\n\n\n:warning: Warning  This is the plot from the latest commit on https://github.com/VEZY/PlantBiophysics-paper/. If you want to make your own benchmarking, run the script that was used to perform it, but careful, it takes a long time to perform!"
  },
  {
    "objectID": "notebooks/evaluation/Fig3/Fig3_PlantBiophysics_global_evaluation.html",
    "href": "notebooks/evaluation/Fig3/Fig3_PlantBiophysics_global_evaluation.html",
    "title": "Global evaluation of PlantBiophysics.jl: observations vs simulations",
    "section": "",
    "text": "using Pkg\nPkg.activate(\".\")\n\n  Activating project at `~/Documents/Codes_divers/PlantBiophysics-paper-Quarto/notebooks/evaluation/Fig3`\n### A Pluto.jl notebook ###\n# v0.19.27\n\nusing Markdown\nusing InteractiveUtils\nThis Pluto notebook presents the computation of Fig. 3 from the scientific article. The notebook does not compute anything because it would imply a dependency on R (plantecophys) and Python (LeafGasExchange.jl), which is possible but not performant in Pluto an Github actions. Instead, we display the code and the results only. If you want to reproduce the results, execute the code provided here, or the code from the script provided here."
  },
  {
    "objectID": "notebooks/evaluation/Fig3/Fig3_PlantBiophysics_global_evaluation.html#importing-the-dependencies",
    "href": "notebooks/evaluation/Fig3/Fig3_PlantBiophysics_global_evaluation.html#importing-the-dependencies",
    "title": "Global evaluation of PlantBiophysics.jl: observations vs simulations",
    "section": "Importing the dependencies:",
    "text": "Importing the dependencies:\n\nNote\nMake sure to have R installed on your computer first.\nLoading the Julia packages:\nusing CSV, Statistics, DataFrames, Downloads, Dates\nusing AlgebraOfGraphics, CairoMakie, Colors\nusing PlantBiophysics, PlantSimEngine, PlantMeteo, RCall, LeafGasExchange, Cropbox\nusing MonteCarloMeasurements\n\nbegin\n    using CSV, Statistics, DataFrames, Downloads, Dates\n    using AlgebraOfGraphics, CairoMakie, Colors\n    using PlantBiophysics, PlantSimEngine, PlantMeteo\n    using PlutoUI\nend\n\n\nLoading the R package (note the use of the R\\\"\\\"\\\" macro here that sends the code to R):\nR\\\"\\\"\\\"\nlibrary(plantecophys)\n\\\"\\\"\\\""
  },
  {
    "objectID": "notebooks/evaluation/Fig3/Fig3_PlantBiophysics_global_evaluation.html#reading-the-data",
    "href": "notebooks/evaluation/Fig3/Fig3_PlantBiophysics_global_evaluation.html#reading-the-data",
    "title": "Global evaluation of PlantBiophysics.jl: observations vs simulations",
    "section": "Reading the data",
    "text": "Reading the data\nThe data comes from Medlyn et al. (2015), see here for more details.\n\ndf = let\n    df_ = read_licor6400(Downloads.download(\"https://figshare.com/ndownloader/files/3402635\"))\n\n    # Computing DateTime from Date and Time:\n    transform!(\n        df_,\n        [:Date, :Time] =&gt; ((x, y) -&gt; Date.(x, dateformat\"Y/m/d\") .+ y) =&gt; :Date\n    )\n\n    # Initializing the columns:\n    df_.VcMaxRef .= df_.JMaxRef .= df_.RdRef .= df_.TPURef .= df_.g0 .= df_.g1 .= df_.Tᵣ .= 0.0\n    df_.AsimPB .= df_.EsimPB .= df_.TlsimPB .= df_.GssimPB .= 0.0\n    df_.VcMaxRefPE .= df_.JMaxRefPE .= df_.RdRefPE .= df_.TPURefPE .= df_.g0PE .= df_.g1PE .= 0.0\n    df_\nend\n\n\n672×48 DataFrame647 rows omitted\n\n\n\nRow\nDate\nTime\nCurve\nQflag\nSite\nLeaf Age\nChl a+b\nNa\nPa\nSLA\nA\nGₛ\nCᵢ\nTrmmol\nDₗ\nArea\nStmRat\nGbv\nT\nTₗ\nTBlk\nCO2R\nCₐ\nH2OR\nH2OS\nRH_R\nRh\nFlow\nPPFD\nP\nVPD\nTᵣ\ng1\ng0\nTPURef\nRdRef\nJMaxRef\nVcMaxRef\nGssimPB\nTlsimPB\nEsimPB\nAsimPB\ng1PE\ng0PE\nTPURefPE\nRdRefPE\nJMaxRefPE\nVcMaxRefPE\n\n\n\nDateTime\nTime\nInt64\nInt64\nInt64\nInt64\nString15\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nInt64\nInt64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\n\n\n\n\n1\n2001-11-14T09:38:00\n09:38:00\n1\n1\n2\n0\n434.0988776\n2.42908\n0.194452\n5.169\n10.5883\n0.253715\n139.167\n2.305\n0.566167\n6\n1\n2.84\n16.8883\n17.7417\n16.9367\n201.533\n188.35\n14.0995\n16.8195\n63.89\n0.76215\n500.067\n1500.17\n87.4917\n0.459326\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n2\n2001-11-14T09:40:00\n09:40:00\n1\n1\n2\n0\n434.0988776\n2.42908\n0.194452\n5.169\n4.19333\n0.255732\n75.5\n2.385\n0.5815\n6\n1\n2.84\n17.2317\n18.0533\n17.3183\n100.417\n95.15\n14.2923\n17.1083\n63.37\n0.7586\n499.983\n1499.67\n87.49\n0.476431\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n3\n2001-11-14T09:42:00\n09:42:00\n1\n1\n2\n0\n434.0988776\n2.42908\n0.194452\n5.169\n0.680833\n0.257113\n45.6167\n2.54167\n0.615833\n6\n1\n2.84\n17.78\n18.5917\n17.885\n50.15\n49.2\n14.5342\n17.5292\n62.2467\n0.75075\n500.117\n1499.17\n87.4983\n0.50925\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n4\n2001-11-14T09:44:00\n09:44:00\n1\n1\n2\n0\n434.0988776\n2.42908\n0.194452\n5.169\n-2.80833\n0.256369\n17.95\n2.65333\n0.644333\n6\n1\n2.84\n18.3133\n19.0883\n18.425\n2.23333\n5.6\n14.8568\n17.982\n61.5383\n0.744833\n500.3\n1499.0\n87.495\n0.539113\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n5\n2001-11-14T09:48:00\n09:48:00\n1\n1\n2\n0\n434.0988776\n2.42908\n0.194452\n5.169\n21.7167\n0.244161\n269.333\n2.54333\n0.644833\n6\n1\n2.84\n18.6567\n19.265\n18.845\n401.433\n374.267\n15.2562\n18.2513\n61.845\n0.7399\n500.433\n1500.0\n87.5\n0.561485\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n6\n2001-11-14T09:50:00\n09:50:00\n1\n1\n2\n0\n434.0988776\n2.42908\n0.194452\n5.169\n33.0167\n0.23896\n596.5\n2.47833\n0.639333\n6\n1\n2.84\n18.825\n19.385\n19.0183\n802.783\n760.9\n15.5877\n18.5048\n62.535\n0.742383\n500.117\n1499.67\n87.5083\n0.562009\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n7\n2001-11-14T09:52:00\n09:52:00\n1\n1\n2\n0\n434.0988776\n2.42908\n0.194452\n5.169\n34.8167\n0.23811\n779.5\n2.45667\n0.635667\n6\n1\n2.84\n18.9717\n19.5333\n19.1683\n1000.02\n955.4\n15.8923\n18.7838\n63.175\n0.7467\n500.1\n1499.83\n87.505\n0.557676\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n8\n2001-11-14T09:54:00\n09:54:00\n1\n1\n2\n0\n434.0988776\n2.42908\n0.194452\n5.169\n36.85\n0.235775\n966.167\n2.43\n0.634667\n6\n1\n2.84\n19.1633\n19.6867\n19.345\n1202.93\n1155.4\n16.1855\n19.0453\n63.575\n0.748067\n500.267\n1500.67\n87.5083\n0.561338\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n9\n2001-11-14T09:56:00\n09:56:00\n1\n1\n2\n0\n434.0988776\n2.42908\n0.194452\n5.169\n32.15\n0.219851\n981.333\n2.12667\n0.590667\n6\n1\n2.84\n19.2667\n19.3167\n19.49\n1199.08\n1157.62\n16.4565\n18.9562\n64.23\n0.739867\n500.433\n999.333\n87.51\n0.583352\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n10\n2001-11-14T09:58:00\n09:58:00\n1\n1\n2\n0\n434.0988776\n2.42908\n0.194452\n5.169\n23.9833\n0.197983\n1023.33\n1.805\n0.551167\n6\n1\n2.84\n19.4083\n18.945\n19.7083\n1199.98\n1168.7\n16.6917\n18.8147\n64.5833\n0.727933\n500.2\n499.5\n87.5017\n0.615516\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n11\n2001-11-14T10:00:00\n10:00:00\n1\n1\n2\n0\n434.0988776\n2.42908\n0.194452\n5.169\n10.7583\n0.18949\n1110.0\n1.58167\n0.503333\n6\n1\n2.84\n19.375\n18.61\n19.6933\n1199.73\n1184.58\n16.9817\n18.8433\n65.83\n0.730467\n500.283\n200.0\n87.5083\n0.608521\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n12\n2001-11-14T10:02:00\n10:02:00\n1\n1\n2\n0\n434.0988776\n2.42908\n0.194452\n5.169\n6.26167\n0.175584\n1146.67\n1.44\n0.491833\n6\n1\n2.84\n19.5\n18.585\n19.9\n1204.92\n1195.37\n17.2355\n18.9318\n66.2967\n0.72825\n500.55\n100.333\n87.5083\n0.618314\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n13\n2001-11-14T10:04:00\n10:04:00\n1\n1\n2\n0\n434.0988776\n2.42908\n0.194452\n5.169\n2.07667\n0.163482\n1173.33\n1.31167\n0.477\n6\n1\n2.84\n19.51\n18.5183\n19.93\n1202.22\n1197.85\n17.4602\n19.003\n67.1183\n0.7305\n500.367\n49.1667\n87.5067\n0.613576\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n\n\n661\n2002-05-10T14:42:00\n14:42:00\n48\n1\n5\n1\n487.6722449\n2.20796\n0.199797\n4.863\n0.433813\n0.181529\n47.8582\n2.97348\n0.987952\n6\n1\n2.84\n17.9095\n17.8057\n18.1443\n52.6571\n51.8952\n8.53152\n12.0548\n36.369\n0.513895\n500.267\n1499.81\n87.7486\n1.00131\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n662\n2002-05-10T14:44:00\n14:44:00\n48\n1\n5\n1\n487.6722449\n2.20796\n0.199797\n4.863\n-2.52916\n0.171975\n19.4831\n2.88893\n1.00857\n6\n1\n2.84\n17.9643\n17.8705\n18.2252\n0.5\n3.52857\n8.49267\n11.916\n36.0562\n0.505971\n500.295\n1500.71\n87.7457\n1.02114\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n663\n2002-05-10T14:49:00\n14:49:00\n48\n1\n5\n1\n487.6722449\n2.20796\n0.199797\n4.863\n16.3612\n0.165605\n261.745\n2.61134\n0.945857\n6\n1\n2.84\n17.2481\n17.1924\n17.42\n399.971\n379.248\n8.55414\n11.6497\n37.9976\n0.517481\n500.248\n1501.43\n87.7529\n0.953298\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n664\n2002-05-10T14:51:00\n14:51:00\n48\n1\n5\n1\n487.6722449\n2.20796\n0.199797\n4.863\n22.1286\n0.157962\n600.905\n2.49198\n0.940952\n6\n1\n2.84\n17.0481\n17.039\n17.2048\n801.61\n772.614\n8.53948\n11.4939\n38.4162\n0.51709\n500.267\n1500.1\n87.7519\n0.942066\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n665\n2002-05-10T14:54:00\n14:54:00\n48\n1\n5\n1\n487.6722449\n2.20796\n0.199797\n4.863\n22.1331\n0.149045\n783.115\n2.32728\n0.930048\n6\n1\n2.84\n16.841\n16.8105\n16.9781\n997.81\n968.895\n8.53476\n11.2947\n38.901\n0.514871\n500.233\n1500.14\n87.7524\n0.934048\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n666\n2002-05-10T14:56:00\n14:56:00\n48\n1\n5\n1\n487.6722449\n2.20796\n0.199797\n4.863\n21.7473\n0.136306\n968.674\n2.16183\n0.937286\n6\n1\n2.84\n16.7162\n16.7214\n16.8514\n1199.37\n1170.17\n8.52995\n11.0942\n39.19\n0.509729\n500.229\n1501.86\n87.7514\n0.936503\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n667\n2002-05-10T14:58:00\n14:58:00\n48\n1\n5\n1\n487.6722449\n2.20796\n0.199797\n4.863\n18.3938\n0.117834\n979.171\n1.88159\n0.935762\n6\n1\n2.84\n16.469\n16.4619\n16.6119\n1200.82\n1176.07\n8.52286\n10.7548\n39.7752\n0.501952\n500.386\n999.238\n87.75\n0.936525\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n668\n2002-05-10T15:00:00\n15:00:00\n48\n1\n5\n1\n487.6722449\n2.20796\n0.199797\n4.863\n15.2872\n0.101911\n989.475\n1.58378\n0.903714\n6\n1\n2.84\n15.9771\n15.9238\n16.1381\n1198.11\n1178.16\n8.51976\n10.399\n41.029\n0.50079\n500.419\n501.0\n87.75\n0.909727\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n669\n2002-05-10T15:03:00\n15:03:00\n48\n1\n5\n1\n487.6722449\n2.20796\n0.199797\n4.863\n8.96392\n0.088535\n1052.8\n1.33788\n0.871571\n6\n1\n2.84\n15.5248\n15.4176\n15.7019\n1200.42\n1187.72\n8.52157\n10.1093\n42.241\n0.501133\n500.462\n200.048\n87.7519\n0.883162\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n670\n2002-05-10T15:06:00\n15:06:00\n48\n1\n5\n1\n487.6722449\n2.20796\n0.199797\n4.863\n4.41685\n0.0732484\n1104.13\n1.06072\n0.830143\n6\n1\n2.84\n14.8667\n14.7405\n15.0176\n1201.69\n1194.74\n8.45257\n9.71181\n43.7205\n0.502443\n500.505\n99.0476\n87.751\n0.844364\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n671\n2002-05-10T15:10:00\n15:10:00\n48\n1\n5\n1\n487.6722449\n2.20796\n0.199797\n4.863\n2.74653\n0.0579618\n1120.68\n0.825775\n0.813476\n6\n1\n2.84\n14.5005\n14.3152\n14.6119\n1201.63\n1196.88\n8.39919\n9.37986\n44.479\n0.496762\n500.495\n49.9524\n87.7581\n0.834062\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n672\n2002-05-10T15:12:00\n15:12:00\n48\n1\n5\n1\n487.6722449\n2.20796\n0.199797\n4.863\n-0.53206\n0.0471338\n1183.54\n0.693751\n0.82781\n6\n1\n2.84\n14.4262\n14.2838\n14.5538\n1199.47\n1199.09\n8.36586\n9.19005\n44.5167\n0.489024\n500.4\n-0.142857\n87.7595\n0.84283\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0"
  },
  {
    "objectID": "notebooks/evaluation/Fig3/Fig3_PlantBiophysics_global_evaluation.html#fitting",
    "href": "notebooks/evaluation/Fig3/Fig3_PlantBiophysics_global_evaluation.html#fitting",
    "title": "Global evaluation of PlantBiophysics.jl: observations vs simulations",
    "section": "Fitting",
    "text": "Fitting\nPhotosynthesis and stomatal conductance parameters are fitted using PlantBiophysics.jl here, but it is also possible to use plantecophys instead (see Julia script for more info). Comparison results are close with both.\n\ndf_fit = let df_ = df\n    for i in unique(df.Curve)\n        dfi = filter(x -&gt; x.Curve == i, df_)\n        sort!(dfi, :Cᵢ)\n\n        g0, g1 = PlantSimEngine.fit(Medlyn, dfi)\n        df_.g0[df.Curve.==i] .= g0\n        df_.g1[df.Curve.==i] .= g1\n\n        filter!(x -&gt; x.PPFD &gt; 1400.0, dfi)\n\n        VcMaxRef, JMaxRef, RdRef, TPURef, Tᵣ = PlantSimEngine.fit(Fvcb, dfi)\n        df_.VcMaxRef[df_.Curve.==i] .= VcMaxRef\n        df_.JMaxRef[df_.Curve.==i] .= JMaxRef\n        df_.RdRef[df_.Curve.==i] .= RdRef\n        df_.TPURef[df_.Curve.==i] .= TPURef\n        df_.Tᵣ[df_.Curve.==i] .= Tᵣ\n    end\nend"
  },
  {
    "objectID": "notebooks/evaluation/Fig3/Fig3_PlantBiophysics_global_evaluation.html#simulation",
    "href": "notebooks/evaluation/Fig3/Fig3_PlantBiophysics_global_evaluation.html#simulation",
    "title": "Global evaluation of PlantBiophysics.jl: observations vs simulations",
    "section": "Simulation",
    "text": "Simulation\nWe set the wind velocity to 20 \\(m.s^{-1}\\) considering that the Licor-6400 chamber is well ventilated. The characteristic length is set to the square root of the chamber area in \\(m^2\\). The leaf absorbtance and emissivity are set to the default value from plantecophys.\n\nPlantBiophysics\n\nbegin\n    d = sqrt(df.Area[1]) / 100 # Characteristic dimension\n    Wind = 20.0 # Wind, in m/s\n    Leaf_abs = 0.86 # default from plantecophys\n    emissivity = 0.95 # default from plantecophys\nend\n\n\n0.95\n\n\n\ndf_PB = let df = df\n    constants = Constants()\n    atm_cols = keys(Atmosphere(T=25.0, Rh=0.5, Wind=10.0))\n    for i in unique(df.Curve)\n        dfi = filter(x -&gt; x.Curve == i, df)\n\n        cols = fieldnames(Atmosphere)\n        dfiMeteo = select(dfi, names(dfi, x -&gt; Symbol(x) in atm_cols))\n        dfiMeteo.Wind .= Wind\n        # Note that as we only use A-Ci curves, there is no NIR in the Licor6400\n        dfiMeteo.Ri_SW_f .= dfi.PPFD .* Leaf_abs ./ (4.57)\n        dfiMeteo.check .= false # Remove checks from Atmopshere (P &lt; 87kPa)\n        meteo = Weather(dfiMeteo)\n\n        leaf = ModelList(\n            energy_balance=Monteith(\n                aₛₕ=2,\n                aₛᵥ=1,\n                ε=emissivity, # Matching the value in plantecophys (https://github.com/RemkoDuursma/plantecophys/blob/c9749828041f10ca47c6691436678e0a5632cfb8/R/LeafEnergyBalance.R#L112)\n                maxiter=100,\n            ),\n            photosynthesis=Fvcb(\n                Tᵣ=dfi.Tᵣ[1],\n                VcMaxRef=dfi.VcMaxRef[1],\n                JMaxRef=dfi.JMaxRef[1],\n                RdRef=dfi.RdRef[1],\n                TPURef=dfi.TPURef[1],\n            ),\n            stomatal_conductance=Medlyn(dfi.g0[1], dfi.g1[1]),\n            status=(Rₛ=meteo[:Ri_SW_f], sky_fraction=1.0, PPFD=dfi.PPFD, d=d)\n        )\n\n        run!(leaf, meteo)\n        df.AsimPB[df.Curve.==i, :] = DataFrame(leaf).A\n        df.EsimPB[df.Curve.==i, :] = DataFrame(leaf).λE ./ (meteo[:λ] * constants.Mₕ₂ₒ) * 1000\n        df.TlsimPB[df.Curve.==i, :] = DataFrame(leaf).Tₗ\n        df.GssimPB[df.Curve.==i, :] = DataFrame(leaf).Gₛ\n    end\n    df\nend\n\n\n┌ Warning: P (86.89857143) should be in kPa (i.e. 101.325 kPa at sea level), please consider converting it\n└ @ PlantMeteo /Users/arsouze/.julia/packages/PlantMeteo/HpPR0/src/structs/atmosphere.jl:90\n\n\n672×48 DataFrame647 rows omitted\n\n\n\nRow\nDate\nTime\nCurve\nQflag\nSite\nLeaf Age\nChl a+b\nNa\nPa\nSLA\nA\nGₛ\nCᵢ\nTrmmol\nDₗ\nArea\nStmRat\nGbv\nT\nTₗ\nTBlk\nCO2R\nCₐ\nH2OR\nH2OS\nRH_R\nRh\nFlow\nPPFD\nP\nVPD\nTᵣ\ng1\ng0\nTPURef\nRdRef\nJMaxRef\nVcMaxRef\nGssimPB\nTlsimPB\nEsimPB\nAsimPB\ng1PE\ng0PE\nTPURefPE\nRdRefPE\nJMaxRefPE\nVcMaxRefPE\n\n\n\nDateTime\nTime\nInt64\nInt64\nInt64\nInt64\nString15\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nInt64\nInt64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\n\n\n\n\n1\n2001-11-14T09:38:00\n09:38:00\n1\n1\n2\n0\n434.0988776\n2.42908\n0.194452\n5.169\n10.5883\n0.253715\n139.167\n2.305\n0.566167\n6\n1\n2.84\n16.8883\n17.7417\n16.9367\n201.533\n188.35\n14.0995\n16.8195\n63.89\n0.76215\n500.067\n1500.17\n87.4917\n0.459326\n18.9181\n0.256523\n0.18388\n11.3072\n0.0\n178.17\n77.6146\n0.253136\n17.8155\n2.33848\n9.54724\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n2\n2001-11-14T09:40:00\n09:40:00\n1\n1\n2\n0\n434.0988776\n2.42908\n0.194452\n5.169\n4.19333\n0.255732\n75.5\n2.385\n0.5815\n6\n1\n2.84\n17.2317\n18.0533\n17.3183\n100.417\n95.15\n14.2923\n17.1083\n63.37\n0.7586\n499.983\n1499.67\n87.49\n0.476431\n18.9181\n0.256523\n0.18388\n11.3072\n0.0\n178.17\n77.6146\n0.235755\n18.1743\n2.27435\n3.64789\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n3\n2001-11-14T09:42:00\n09:42:00\n1\n1\n2\n0\n434.0988776\n2.42908\n0.194452\n5.169\n0.680833\n0.257113\n45.6167\n2.54167\n0.615833\n6\n1\n2.84\n17.78\n18.5917\n17.885\n50.15\n49.2\n14.5342\n17.5292\n62.2467\n0.75075\n500.117\n1499.17\n87.4983\n0.50925\n18.9181\n0.256523\n0.18388\n11.3072\n0.0\n178.17\n77.6146\n0.195849\n18.7731\n2.05908\n0.444311\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n4\n2001-11-14T09:44:00\n09:44:00\n1\n1\n2\n0\n434.0988776\n2.42908\n0.194452\n5.169\n-2.80833\n0.256369\n17.95\n2.65333\n0.644333\n6\n1\n2.84\n18.3133\n19.0883\n18.425\n2.23333\n5.6\n14.8568\n17.982\n61.5383\n0.744833\n500.3\n1499.0\n87.495\n0.539113\n18.9181\n0.256523\n0.18388\n11.3072\n0.0\n178.17\n77.6146\n0.18388\n19.31\n2.04719\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n5\n2001-11-14T09:48:00\n09:48:00\n1\n1\n2\n0\n434.0988776\n2.42908\n0.194452\n5.169\n21.7167\n0.244161\n269.333\n2.54333\n0.644833\n6\n1\n2.84\n18.6567\n19.265\n18.845\n401.433\n374.267\n15.2562\n18.2513\n61.845\n0.7399\n500.433\n1500.0\n87.5\n0.561485\n18.9181\n0.256523\n0.18388\n11.3072\n0.0\n178.17\n77.6146\n0.25292\n19.4951\n2.7497\n19.2821\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n6\n2001-11-14T09:50:00\n09:50:00\n1\n1\n2\n0\n434.0988776\n2.42908\n0.194452\n5.169\n33.0167\n0.23896\n596.5\n2.47833\n0.639333\n6\n1\n2.84\n18.825\n19.385\n19.0183\n802.783\n760.9\n15.5877\n18.5048\n62.535\n0.742383\n500.117\n1499.67\n87.5083\n0.562009\n18.9181\n0.256523\n0.18388\n11.3072\n0.0\n178.17\n77.6146\n0.23756\n19.693\n2.62041\n30.654\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n7\n2001-11-14T09:52:00\n09:52:00\n1\n1\n2\n0\n434.0988776\n2.42908\n0.194452\n5.169\n34.8167\n0.23811\n779.5\n2.45667\n0.635667\n6\n1\n2.84\n18.9717\n19.5333\n19.1683\n1000.02\n955.4\n15.8923\n18.7838\n63.175\n0.7467\n500.1\n1499.83\n87.505\n0.557676\n18.9181\n0.256523\n0.18388\n11.3072\n0.0\n178.17\n77.6146\n0.228716\n19.8608\n2.53041\n32.235\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n8\n2001-11-14T09:54:00\n09:54:00\n1\n1\n2\n0\n434.0988776\n2.42908\n0.194452\n5.169\n36.85\n0.235775\n966.167\n2.43\n0.634667\n6\n1\n2.84\n19.1633\n19.6867\n19.345\n1202.93\n1155.4\n16.1855\n19.0453\n63.575\n0.748067\n500.267\n1500.67\n87.5083\n0.561338\n18.9181\n0.256523\n0.18388\n11.3072\n0.0\n178.17\n77.6146\n0.22219\n20.0635\n2.48815\n33.4133\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n9\n2001-11-14T09:56:00\n09:56:00\n1\n1\n2\n0\n434.0988776\n2.42908\n0.194452\n5.169\n32.15\n0.219851\n981.333\n2.12667\n0.590667\n6\n1\n2.84\n19.2667\n19.3167\n19.49\n1199.08\n1157.62\n16.4565\n18.9562\n64.23\n0.739867\n500.433\n999.333\n87.51\n0.583352\n18.9181\n0.256523\n0.18388\n11.3072\n0.0\n178.17\n77.6146\n0.217672\n19.7207\n2.29927\n29.3508\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n10\n2001-11-14T09:58:00\n09:58:00\n1\n1\n2\n0\n434.0988776\n2.42908\n0.194452\n5.169\n23.9833\n0.197983\n1023.33\n1.805\n0.551167\n6\n1\n2.84\n19.4083\n18.945\n19.7083\n1199.98\n1168.7\n16.6917\n18.8147\n64.5833\n0.727933\n500.2\n499.5\n87.5017\n0.615516\n18.9181\n0.256523\n0.18388\n11.3072\n0.0\n178.17\n77.6146\n0.207117\n19.4195\n2.09119\n20.3233\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n11\n2001-11-14T10:00:00\n10:00:00\n1\n1\n2\n0\n434.0988776\n2.42908\n0.194452\n5.169\n10.7583\n0.18949\n1110.0\n1.58167\n0.503333\n6\n1\n2.84\n19.375\n18.61\n19.6933\n1199.73\n1184.58\n16.9817\n18.8433\n65.83\n0.730467\n500.283\n200.0\n87.5083\n0.608521\n18.9181\n0.256523\n0.18388\n11.3072\n0.0\n178.17\n77.6146\n0.194961\n19.1414\n1.84926\n9.77645\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n12\n2001-11-14T10:02:00\n10:02:00\n1\n1\n2\n0\n434.0988776\n2.42908\n0.194452\n5.169\n6.26167\n0.175584\n1146.67\n1.44\n0.491833\n6\n1\n2.84\n19.5\n18.585\n19.9\n1204.92\n1195.37\n17.2355\n18.9318\n66.2967\n0.72825\n500.55\n100.333\n87.5083\n0.618314\n18.9181\n0.256523\n0.18388\n11.3072\n0.0\n178.17\n77.6146\n0.189678\n19.1785\n1.79529\n5.16737\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n13\n2001-11-14T10:04:00\n10:04:00\n1\n1\n2\n0\n434.0988776\n2.42908\n0.194452\n5.169\n2.07667\n0.163482\n1173.33\n1.31167\n0.477\n6\n1\n2.84\n19.51\n18.5183\n19.93\n1202.22\n1197.85\n17.4602\n19.003\n67.1183\n0.7305\n500.367\n49.1667\n87.5067\n0.613576\n18.9181\n0.256523\n0.18388\n11.3072\n0.0\n178.17\n77.6146\n0.18679\n19.1501\n1.73914\n2.59479\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n\n\n661\n2002-05-10T14:42:00\n14:42:00\n48\n1\n5\n1\n487.6722449\n2.20796\n0.199797\n4.863\n0.433813\n0.181529\n47.8582\n2.97348\n0.987952\n6\n1\n2.84\n17.9095\n17.8057\n18.1443\n52.6571\n51.8952\n8.53152\n12.0548\n36.369\n0.513895\n500.267\n1499.81\n87.7486\n1.00131\n17.3135\n1.67598\n0.0819242\n6.87871\n0.0\n111.963\n65.6208\n0.0931624\n18.9518\n1.82072\n0.226282\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n662\n2002-05-10T14:44:00\n14:44:00\n48\n1\n5\n1\n487.6722449\n2.20796\n0.199797\n4.863\n-2.52916\n0.171975\n19.4831\n2.88893\n1.00857\n6\n1\n2.84\n17.9643\n17.8705\n18.2252\n0.5\n3.52857\n8.49267\n11.916\n36.0562\n0.505971\n500.295\n1500.71\n87.7457\n1.02114\n17.3135\n1.67598\n0.0819242\n6.87871\n0.0\n111.963\n65.6208\n0.0819242\n19.0509\n1.64518\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n663\n2002-05-10T14:49:00\n14:49:00\n48\n1\n5\n1\n487.6722449\n2.20796\n0.199797\n4.863\n16.3612\n0.165605\n261.745\n2.61134\n0.945857\n6\n1\n2.84\n17.2481\n17.1924\n17.42\n399.971\n379.248\n8.55414\n11.6497\n37.9976\n0.517481\n500.248\n1501.43\n87.7529\n0.953298\n17.3135\n1.67598\n0.0819242\n6.87871\n0.0\n111.963\n65.6208\n0.197553\n17.9463\n3.37673\n16.3017\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n664\n2002-05-10T14:51:00\n14:51:00\n48\n1\n5\n1\n487.6722449\n2.20796\n0.199797\n4.863\n22.1286\n0.157962\n600.905\n2.49198\n0.940952\n6\n1\n2.84\n17.0481\n17.039\n17.2048\n801.61\n772.614\n8.53948\n11.4939\n38.4162\n0.51709\n500.267\n1500.1\n87.7519\n0.942066\n17.3135\n1.67598\n0.0819242\n6.87871\n0.0\n111.963\n65.6208\n0.153111\n17.8951\n2.68506\n20.6361\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n665\n2002-05-10T14:54:00\n14:54:00\n48\n1\n5\n1\n487.6722449\n2.20796\n0.199797\n4.863\n22.1331\n0.149045\n783.115\n2.32728\n0.930048\n6\n1\n2.84\n16.841\n16.8105\n16.9781\n997.81\n968.895\n8.53476\n11.2947\n38.901\n0.514871\n500.233\n1500.14\n87.7524\n0.934048\n17.3135\n1.67598\n0.0819242\n6.87871\n0.0\n111.963\n65.6208\n0.138599\n17.7431\n2.43998\n20.6361\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n666\n2002-05-10T14:56:00\n14:56:00\n48\n1\n5\n1\n487.6722449\n2.20796\n0.199797\n4.863\n21.7473\n0.136306\n968.674\n2.16183\n0.937286\n6\n1\n2.84\n16.7162\n16.7214\n16.8514\n1199.37\n1170.17\n8.52995\n11.0942\n39.19\n0.509729\n500.229\n1501.86\n87.7514\n0.936503\n17.3135\n1.67598\n0.0819242\n6.87871\n0.0\n111.963\n65.6208\n0.128694\n17.654\n2.28843\n20.6361\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n667\n2002-05-10T14:58:00\n14:58:00\n48\n1\n5\n1\n487.6722449\n2.20796\n0.199797\n4.863\n18.3938\n0.117834\n979.171\n1.88159\n0.935762\n6\n1\n2.84\n16.469\n16.4619\n16.6119\n1200.82\n1176.07\n8.52286\n10.7548\n39.7752\n0.501952\n500.386\n999.238\n87.75\n0.936525\n17.3135\n1.67598\n0.0819242\n6.87871\n0.0\n111.963\n65.6208\n0.129013\n16.9469\n2.16935\n20.5116\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n668\n2002-05-10T15:00:00\n15:00:00\n48\n1\n5\n1\n487.6722449\n2.20796\n0.199797\n4.863\n15.2872\n0.101911\n989.475\n1.58378\n0.903714\n6\n1\n2.84\n15.9771\n15.9238\n16.1381\n1198.11\n1178.16\n8.51976\n10.399\n41.029\n0.50079\n500.419\n501.0\n87.75\n0.909727\n17.3135\n1.67598\n0.0819242\n6.87871\n0.0\n111.963\n65.6208\n0.120023\n16.0406\n1.86769\n16.2299\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n669\n2002-05-10T15:03:00\n15:03:00\n48\n1\n5\n1\n487.6722449\n2.20796\n0.199797\n4.863\n8.96392\n0.088535\n1052.8\n1.33788\n0.871571\n6\n1\n2.84\n15.5248\n15.4176\n15.7019\n1200.42\n1187.72\n8.52157\n10.1093\n42.241\n0.501133\n500.462\n200.048\n87.7519\n0.883162\n17.3135\n1.67598\n0.0819242\n6.87871\n0.0\n111.963\n65.6208\n0.103403\n15.3677\n1.52996\n9.07707\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n670\n2002-05-10T15:06:00\n15:06:00\n48\n1\n5\n1\n487.6722449\n2.20796\n0.199797\n4.863\n4.41685\n0.0732484\n1104.13\n1.06072\n0.830143\n6\n1\n2.84\n14.8667\n14.7405\n15.0176\n1201.69\n1194.74\n8.45257\n9.71181\n43.7205\n0.502443\n500.505\n99.0476\n87.751\n0.844364\n17.3135\n1.67598\n0.0819242\n6.87871\n0.0\n111.963\n65.6208\n0.0937966\n14.6667\n1.32339\n4.9807\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n671\n2002-05-10T15:10:00\n15:10:00\n48\n1\n5\n1\n487.6722449\n2.20796\n0.199797\n4.863\n2.74653\n0.0579618\n1120.68\n0.825775\n0.813476\n6\n1\n2.84\n14.5005\n14.3152\n14.6119\n1201.63\n1196.88\n8.39919\n9.37986\n44.479\n0.496762\n500.495\n49.9524\n87.7581\n0.834062\n17.3135\n1.67598\n0.0819242\n6.87871\n0.0\n111.963\n65.6208\n0.0882205\n14.2651\n1.22863\n2.62951\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n672\n2002-05-10T15:12:00\n15:12:00\n48\n1\n5\n1\n487.6722449\n2.20796\n0.199797\n4.863\n-0.53206\n0.0471338\n1183.54\n0.693751\n0.82781\n6\n1\n2.84\n14.4262\n14.2838\n14.5538\n1199.47\n1199.09\n8.36586\n9.19005\n44.5167\n0.489024\n500.4\n-0.142857\n87.7595\n0.84283\n17.3135\n1.67598\n0.0819242\n6.87871\n0.0\n111.963\n65.6208\n0.0819242\n14.159\n1.15196\n-0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n0.0\n\n\n\n\n\n\n\n\nplantecophys\nBelow is presented the code for running the exact same simulation with the two other packages.\n!!! note The code shown here for plantecophys and LeafGasExchange.jl is not executed, just displayed. If you want to reproduce the computation, please use the script instead.\nbegin\n    if !simulated\n                \n        R\\\"\\\"\\\"\n        A_sim = c()\n        E_sim = c()\n        Tl_sim = c()\n        Gs_sim = c()\n        failed =c()\n        \\\"\\\"\\\"\n\n        df.AsimPE .= df.EsimPE .= df.TlsimPE .= df.GssimPE .= df.PEfailed .= 0.\n        for i in unique(df.Curve)\n            dfi = filter(x-&gt;x.Curve == i,df)\n            dfi = dfi[:,3:end]\n            @rput dfi\n            Ca = dfi.Cₐ\n            @rput Ca\n            R\\\"\\\"\\\"\n            VcMaxRef = dfi$VcMaxRefPE[1]\n            JMaxRef = dfi$JMaxRefPE[1]\n            TPURef = dfi$TPURefPE[1]\n            RdRef = dfi$RdRefPE[1]\n            g0 = dfi$g0PE[1]\n            g1 = dfi$g1PE[1]\n            res = PhotosynEB(Tair = dfi$T,Wind = Wind,VPD=dfi$VPD,\n                     Wleaf = d,Ca = Ca,  StomatalRatio = 1,\n                     LeafAbs = 1.,gsmodel = \"BBOpti\",g0 = g0, g1 = g1,\n                     EaV = 58550.0,EdVC = 2e+05, delsC = 629.26,\n                     EaJ = 29680.0,EdVJ = 2e+05,delsJ = 631.88,\n                     alpha = 0.24,theta = 0.7, Jmax = JMaxRef, \n                     Vcmax = VcMaxRef, TPU = TPURef,Rd = RdRef,\n                     RH = dfi$Rh*100,PPFD=dfi$PPFD,\n                     Patm = dfi$P,gk=0.,\n                     Tcorrect = FALSE)\n            A_sim = append(A_sim,res$ALEAF)\n            Gs_sim = append(Gs_sim,res$GS)\n            failed = append(failed,res$failed)\n            Tl_sim = append(Tl_sim,res$Tleaf)\n            E_sim = append(E_sim,res$ELEAF)\n            \\\"\\\"\\\"\n        end\n        @rget A_sim\n        \n        @rget failed\n        @rget Gs_sim\n        @rget E_sim\n        @rget Tl_sim\n        \n        df.AsimPE .= A_sim\n        df.EsimPE .= E_sim\n        df.TlsimPE .= Tl_sim\n        df.GssimPE .= Gs_sim\n        df.PEfailed .= failed\n    end\nend\n\n\nLeafGasExchange.jl\nbegin\n    df.AsimLG .= df.EsimLG .= df.TlsimLG .= df.GssimLG .= 0.0\n    for i in unique(df.Curve)\n        dfi = filter(x -&gt; x.Curve == i, df)\n        configs = []\n        for i in 1:length(dfi.T)\n            config = :Weather =&gt; (\n                PFD=dfi.PPFD[i],\n                CO2=dfi.Cₐ[i],\n                RH=dfi.Rh[i] * 100,\n                T_air=dfi.T[i],\n                wind=Wind,\n                P_air=dfi.P[i],\n                g0=dfi.g0[i],\n                g1=1.57 * dfi.g1[i],\n                Vc25=dfi.VcMaxRef[i],\n                Jm25=dfi.JMaxRef[i],\n                Rd25=dfi.RdRef[i],\n                Tp25=dfi.TPURef[i],\n                Ear=46.39,\n                Haj=29.68,\n                w=d,\n                d=d,\n                EaVc=58.55,\n                ϵ=emissivity,\n                Dh=21.5,\n                α_s=1 - Leaf_abs\n            )\n            push!(configs, config)\n        end\n        res = simulate(ModelC3MD; configs=configs, nounit=true)\n        df.AsimLG[df.Curve.==i, :] = res.A_net\n        df.EsimLG[df.Curve.==i, :] = res.E\n        df.TlsimLG[df.Curve.==i, :] = res.T\n        df.GssimLG[df.Curve.==i, :] = res.gsc\n    end\nend"
  },
  {
    "objectID": "notebooks/evaluation/Fig3/Fig3_PlantBiophysics_global_evaluation.html#stacking-the-results",
    "href": "notebooks/evaluation/Fig3/Fig3_PlantBiophysics_global_evaluation.html#stacking-the-results",
    "title": "Global evaluation of PlantBiophysics.jl: observations vs simulations",
    "section": "Stacking the results",
    "text": "Stacking the results\nHere we stack the results in a long-format DataFrame for computing the statistics:\n\nbegin\n    meas =\n        stack(\n            select(\n                df,\n                [:Date =&gt; :Date, :Cₐ =&gt; :Cₐ, :A =&gt; :A, :Trmmol =&gt; :E, :Tₗ =&gt; :Tl, :Gₛ =&gt; :Gs]\n            ),\n            [:A, :E, :Tl, :Gs],\n            [:Date, :Cₐ],\n            value_name=:measured\n        )\n\n    sim_PB =\n        stack(\n            select(\n                df_PB,\n                [:Date =&gt; :Date, :AsimPB =&gt; :A, :EsimPB =&gt; :E, :TlsimPB =&gt; :Tl, :GssimPB =&gt; :Gs]\n            ),\n            [:A, :E, :Tl, :Gs],\n            :Date,\n            value_name=:simulated\n        )\n    sim_PB.origin .= \"PlantBiophysics.jl\"\n    sim_PB\nend\n\n\n2688×4 DataFrame2663 rows omitted\n\n\n\nRow\nDate\nvariable\nsimulated\norigin\n\n\n\nDateTime\nString\nFloat64\nString\n\n\n\n\n1\n2001-11-14T09:38:00\nA\n9.54724\nPlantBiophysics.jl\n\n\n2\n2001-11-14T09:40:00\nA\n3.64789\nPlantBiophysics.jl\n\n\n3\n2001-11-14T09:42:00\nA\n0.444311\nPlantBiophysics.jl\n\n\n4\n2001-11-14T09:44:00\nA\n0.0\nPlantBiophysics.jl\n\n\n5\n2001-11-14T09:48:00\nA\n19.2821\nPlantBiophysics.jl\n\n\n6\n2001-11-14T09:50:00\nA\n30.654\nPlantBiophysics.jl\n\n\n7\n2001-11-14T09:52:00\nA\n32.235\nPlantBiophysics.jl\n\n\n8\n2001-11-14T09:54:00\nA\n33.4133\nPlantBiophysics.jl\n\n\n9\n2001-11-14T09:56:00\nA\n29.3508\nPlantBiophysics.jl\n\n\n10\n2001-11-14T09:58:00\nA\n20.3233\nPlantBiophysics.jl\n\n\n11\n2001-11-14T10:00:00\nA\n9.77645\nPlantBiophysics.jl\n\n\n12\n2001-11-14T10:02:00\nA\n5.16737\nPlantBiophysics.jl\n\n\n13\n2001-11-14T10:04:00\nA\n2.59479\nPlantBiophysics.jl\n\n\n⋮\n⋮\n⋮\n⋮\n⋮\n\n\n2677\n2002-05-10T14:42:00\nGs\n0.0931624\nPlantBiophysics.jl\n\n\n2678\n2002-05-10T14:44:00\nGs\n0.0819242\nPlantBiophysics.jl\n\n\n2679\n2002-05-10T14:49:00\nGs\n0.197553\nPlantBiophysics.jl\n\n\n2680\n2002-05-10T14:51:00\nGs\n0.153111\nPlantBiophysics.jl\n\n\n2681\n2002-05-10T14:54:00\nGs\n0.138599\nPlantBiophysics.jl\n\n\n2682\n2002-05-10T14:56:00\nGs\n0.128694\nPlantBiophysics.jl\n\n\n2683\n2002-05-10T14:58:00\nGs\n0.129013\nPlantBiophysics.jl\n\n\n2684\n2002-05-10T15:00:00\nGs\n0.120023\nPlantBiophysics.jl\n\n\n2685\n2002-05-10T15:03:00\nGs\n0.103403\nPlantBiophysics.jl\n\n\n2686\n2002-05-10T15:06:00\nGs\n0.0937966\nPlantBiophysics.jl\n\n\n2687\n2002-05-10T15:10:00\nGs\n0.0882205\nPlantBiophysics.jl\n\n\n2688\n2002-05-10T15:12:00\nGs\n0.0819242\nPlantBiophysics.jl\n\n\n\n\n\n\nSame for the other packages, though the data is not available in the notebook:\nbegin \n    sim_LG =\n            stack(\n                select(\n                    df,\n                    [:Date =&gt; :Date, :AsimLG =&gt; :A, :EsimLG =&gt; :E, :TlsimLG =&gt; :Tl, :GssimLG =&gt; :Gs]\n                ),\n                [:A, :E, :Tl, :Gs],\n                :Date,\n                value_name=:simulated\n            )\n        sim_LG.origin .= \"LeafGasExchange.jl\"\n        \n        sim_PE = stack(\n            select(\n                df,\n                [:Date =&gt; :Date, :AsimPE =&gt; :A, :EsimPE =&gt; :E, :TlsimPE =&gt; :Tl, :GssimPE =&gt; :Gs]\n            ),\n            [:A, :E, :Tl, :Gs],\n            :Date,\n            value_name=:simulated\n        )\n        sim_PE.origin .= \"plantecophys\"\nend\nAnd finally we can stack the results together:\nbegin \n    df_all = vcat(sim_PB, sim_LG, sim_PE)\n    df_res = leftjoin(df_all, meas, on=[:Date, :variable])\nend\nNote that the real code executed here is the following, because neither sim_LG or sim_PE are available:\n\nbegin\n    df_all = sim_PB\n    df_res = leftjoin(df_all, meas, on=[:Date, :variable])\n    # Filtering out the results for very low Cₐ:\n    filter!(x -&gt; x.Cₐ &gt; 150, df_res)\n    filter!(x -&gt; x.Cₐ &gt; 150, df)\n    df_res\nend\n\n\n2228×6 DataFrame2203 rows omitted\n\n\n\nRow\nDate\nvariable\nsimulated\norigin\nCₐ\nmeasured\n\n\n\nDateTime\nString\nFloat64\nString\nFloat64?\nFloat64?\n\n\n\n\n1\n2001-11-14T09:38:00\nA\n9.54724\nPlantBiophysics.jl\n188.35\n10.5883\n\n\n2\n2001-11-14T09:48:00\nA\n19.2821\nPlantBiophysics.jl\n374.267\n21.7167\n\n\n3\n2001-11-14T09:50:00\nA\n30.654\nPlantBiophysics.jl\n760.9\n33.0167\n\n\n4\n2001-11-14T09:52:00\nA\n32.235\nPlantBiophysics.jl\n955.4\n34.8167\n\n\n5\n2001-11-14T09:54:00\nA\n33.4133\nPlantBiophysics.jl\n1155.4\n36.85\n\n\n6\n2001-11-14T09:56:00\nA\n29.3508\nPlantBiophysics.jl\n1157.62\n32.15\n\n\n7\n2001-11-14T09:58:00\nA\n20.3233\nPlantBiophysics.jl\n1168.7\n23.9833\n\n\n8\n2001-11-14T10:00:00\nA\n9.77645\nPlantBiophysics.jl\n1184.58\n10.7583\n\n\n9\n2001-11-14T10:02:00\nA\n5.16737\nPlantBiophysics.jl\n1195.37\n6.26167\n\n\n10\n2001-11-14T10:04:00\nA\n2.59479\nPlantBiophysics.jl\n1197.85\n2.07667\n\n\n11\n2001-11-14T11:11:00\nA\n13.1042\nPlantBiophysics.jl\n344.033\n12.25\n\n\n12\n2001-11-14T11:14:00\nA\n6.99337\nPlantBiophysics.jl\n192.333\n6.88667\n\n\n13\n2001-11-14T11:27:00\nA\n14.3901\nPlantBiophysics.jl\n379.667\n15.1667\n\n\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n\n\n2217\n2002-05-10T14:34:00\nGs\n0.199686\nPlantBiophysics.jl\n340.871\n0.210828\n\n\n2218\n2002-05-10T14:37:00\nGs\n0.192668\nPlantBiophysics.jl\n190.586\n0.20828\n\n\n2219\n2002-05-10T14:49:00\nGs\n0.197553\nPlantBiophysics.jl\n379.248\n0.165605\n\n\n2220\n2002-05-10T14:51:00\nGs\n0.153111\nPlantBiophysics.jl\n772.614\n0.157962\n\n\n2221\n2002-05-10T14:54:00\nGs\n0.138599\nPlantBiophysics.jl\n968.895\n0.149045\n\n\n2222\n2002-05-10T14:56:00\nGs\n0.128694\nPlantBiophysics.jl\n1170.17\n0.136306\n\n\n2223\n2002-05-10T14:58:00\nGs\n0.129013\nPlantBiophysics.jl\n1176.07\n0.117834\n\n\n2224\n2002-05-10T15:00:00\nGs\n0.120023\nPlantBiophysics.jl\n1178.16\n0.101911\n\n\n2225\n2002-05-10T15:03:00\nGs\n0.103403\nPlantBiophysics.jl\n1187.72\n0.088535\n\n\n2226\n2002-05-10T15:06:00\nGs\n0.0937966\nPlantBiophysics.jl\n1194.74\n0.0732484\n\n\n2227\n2002-05-10T15:10:00\nGs\n0.0882205\nPlantBiophysics.jl\n1196.88\n0.0579618\n\n\n2228\n2002-05-10T15:12:00\nGs\n0.0819242\nPlantBiophysics.jl\n1199.09\n0.0471338"
  },
  {
    "objectID": "notebooks/evaluation/Fig3/Fig3_PlantBiophysics_global_evaluation.html#statistics",
    "href": "notebooks/evaluation/Fig3/Fig3_PlantBiophysics_global_evaluation.html#statistics",
    "title": "Global evaluation of PlantBiophysics.jl: observations vs simulations",
    "section": "Statistics",
    "text": "Statistics\nComputing the statistics for each model:\n\n\"\"\"\n    rgb(r, g, b, a)\n\nLike `Colors.RGBA` but accepts colors in the 0-255 range.\n\"\"\"\nfunction rgb(r, g, b, a)\n    return RGBA(r / 255, g / 255, b / 255, a)\nend\n\n\n\"\"\"\n    RMSE(obs,sim)\n\nReturns the Root Mean Squared Error between observations `obs` and simulations `sim`.\nThe closer to 0 the better.\n\"\"\"\nfunction RMSE(obs, sim, digits=2)\n    return round(sqrt(sum((obs .- sim) .^ 2) / length(obs)), digits=digits)\nend\n\n\n\"\"\"\n    nRMSE(obs,sim)\n\nReturns the normalized Root Mean Squared Error between observations `obs` and simulations `sim`.\nThe closer to 0 the better.\n\"\"\"\nfunction nRMSE(obs, sim; digits=2)\n    return round(sqrt(sum((obs .- sim) .^ 2) / length(obs)) / (findmax(obs)[1] - findmin(obs)[1]), digits=digits)\nend\n\n\n\"\"\"\n    EF(obs,sim)\n\nReturns the Efficiency Factor between observations `obs` and simulations `sim` using NSE (Nash-Sutcliffe efficiency) model.\nMore information can be found at https://en.wikipedia.org/wiki/Nash%E2%80%93Sutcliffe_model_efficiency_coefficient.\nThe closer to 1 the better.\n\"\"\"\nfunction EF(obs, sim, digits=2)\n    SSres = sum((obs - sim) .^ 2)\n    SStot = sum((obs .- mean(obs)) .^ 2)\n    return round(1 - SSres / SStot, digits=digits)\nend\n\n\n\"\"\"\n        Bias(obs,sim)\n\n    Returns the bias between observations `obs` and simulations `sim`.\n    The closer to 0 the better.\n    \"\"\"\nfunction Bias(obs, sim, digits=4)\n    return round(mean(sim .- obs), digits=digits)\nend\n\n\n\"\"\"\n    nBias(obs,sim; digits = 2)\n\nReturns the normalised bias (%) between observations `obs` and simulations `sim`.\nThe closer to 0 the better.\n\"\"\"\nfunction nBias(obs, sim; digits=2)\n    return round(mean((sim .- obs)) / (findmax(obs)[1] - findmin(obs)[1]), digits=digits)\nend\n\n\nnBias\n\n\n\nstats =\n    combine(\n        groupby(df_res, [:variable, :origin], sort=true),\n        [:measured, :simulated] =&gt; ((x, y) -&gt; RMSE(x, y)) =&gt; :RMSE,\n        [:measured, :simulated] =&gt; ((x, y) -&gt; nRMSE(x, y)) =&gt; :nRMSE,\n        [:measured, :simulated] =&gt; ((x, y) -&gt; Bias(x, y)) =&gt; :Bias,\n        [:measured, :simulated] =&gt; ((x, y) -&gt; nBias(x, y)) =&gt; :nBias,\n        [:measured, :simulated] =&gt; ((x, y) -&gt; EF(x, y)) =&gt; :EF\n    )\n\n\n4×7 DataFrame\n\n\n\nRow\nvariable\norigin\nRMSE\nnRMSE\nBias\nnBias\nEF\n\n\n\nString\nString\nFloat64\nFloat64\nFloat64\nFloat64\nFloat64\n\n\n\n\n1\nA\nPlantBiophysics.jl\n1.49\n0.03\n-0.0309\n-0.0\n0.98\n\n\n2\nE\nPlantBiophysics.jl\n0.48\n0.05\n0.2722\n0.03\n0.9\n\n\n3\nGs\nPlantBiophysics.jl\n0.02\n0.07\n0.0074\n0.02\n0.88\n\n\n4\nTl\nPlantBiophysics.jl\n0.52\n0.02\n0.3434\n0.02\n0.99"
  },
  {
    "objectID": "notebooks/evaluation/Fig3/Fig3_PlantBiophysics_global_evaluation.html#plotting",
    "href": "notebooks/evaluation/Fig3/Fig3_PlantBiophysics_global_evaluation.html#plotting",
    "title": "Global evaluation of PlantBiophysics.jl: observations vs simulations",
    "section": "Plotting",
    "text": "Plotting\n\nObservations vs simulations (Fig. 3)\n\nbegin\n    transparency_col = 0.8\n    transparency_fill = 0.3\n    color_pb = rgb(0, 0, 0, transparency_col)\n    color_lg = rgb(223, 120, 97, transparency_col)\n    color_pe = rgb(118, 84, 154, transparency_col)\n    fill_pb = rgb(0, 0, 0, transparency_fill)\n    fill_lg = rgb(223, 120, 97, transparency_fill)\n    fill_pe = rgb(118, 84, 154, transparency_fill)\n    stw = 1.5 # strokewidth\n    ms = 7 # markersize\n    noto_sans = assetpath(\"fonts\", \"NotoSans-Regular.ttf\")\n    legend_lab_size = 10\n    size_inches = (10, 10)\n    size_pt = 72 .* size_inches\n    fig = Figure(\n        font=noto_sans,\n        resolution=size_pt,\n        fontsize=12,\n        xminorgridstyle=true,\n    backgroundcolor = :white\n    )\n\n    sideinfo1 = Label(fig[1:2, 1], \"Simulations\", rotation=pi / 2, fontsize=12)\n    sideinfo2 = Label(fig[3, 2:3], \"Observations\", fontsize=12)\n\n    # Assimilation\n    axa = Axis(fig[1, 2], title=\"a) Net CO₂ assimilation (Aₙ)\", aspect=1, titlealign=:left)\n    xlims!(-10.0, 50.0)\n    ylims!(-10.0, 50.0)\n\n    ablines!(axa, 0, 1, color=(:grey, 0.4), linewidth=4)\n\n    # LG = scatter!(\n    #     axa, df.A, df.AsimLG,\n    #     color=fill_lg,\n    #     markersize=ms,\n    #     strokecolor=color_lg,\n    #     strokewidth=stw\n    # )\n    # PE = scatter!(axa, df.A, df.AsimPE,\n    #     color=fill_pe,\n    #     markersize=ms,\n    #     strokecolor=color_pe,\n    #     strokewidth=stw\n    # )\n    PB = scatter!(axa, df.A, df.AsimPB,\n        color=fill_pb,\n        markersize=ms,\n        strokecolor=color_pb,\n        strokewidth=stw\n    )\n    axislegend(\n        axa,\n        [PB],\n        [\n            \"nRMSE: \" * string(filter(x -&gt; x.variable == \"A\" && x.origin == \"PlantBiophysics.jl\", stats).nRMSE[1]),\n        ],\n        \"\",\n        position=:rb,\n        orientation=:vertical,\n        labelsize=legend_lab_size,\n        padding=0.0,\n        framevisible=false\n    )\n\n    # Transpiration\n    axb = Axis(fig[1, 3], title=\"b) Transpiration rate (E)\", aspect=1, titlealign=:left)\n    xlims!(-0.5, 10.0)\n    ylims!(-0.5, 10.0)\n\n    ablines!(axb, 0, 1, color=(:grey, 0.4), linewidth=4)\n\n    # LG = scatter!(axb, df.Trmmol, df.EsimLG,\n    #     color=fill_lg,\n    #     markersize=ms,\n    #     strokecolor=color_lg,\n    #     strokewidth=stw\n    # )\n    # PE = scatter!(axb, df.Trmmol, df.EsimPE,\n    #     color=fill_pe,\n    #     markersize=ms,\n    #     strokecolor=color_pe,\n    #     strokewidth=stw\n    # )\n    PB = scatter!(axb, df.Trmmol, df.EsimPB,\n        color=fill_pb,\n        markersize=ms,\n        strokecolor=color_pb,\n        strokewidth=stw\n    )\n    axislegend(\n        axb,\n        [PB],\n        [\n            \"nRMSE: \" * string(filter(x -&gt; x.variable == \"E\" && x.origin == \"PlantBiophysics.jl\", stats).nRMSE[1]),\n            # \"nRMSE: \" * string(filter(x -&gt; x.variable == \"E\" && x.origin == \"plantecophys\", stats).nRMSE[1]),\n            # \"nRMSE: \" * string(filter(x -&gt; x.variable == \"E\" && x.origin == \"LeafGasExchange.jl\", stats).nRMSE[1]),\n        ],\n        \"\", position=:rb,\n        orientation=:vertical,\n        labelsize=legend_lab_size,\n        padding=0.0,\n        framevisible=false\n    )\n\n    # Stomatal conductance\n    axc = Axis(\n        fig[2, 2],\n        title=\"(c) CO₂ stomatal conductance (Gₛ)\",\n        aspect=1,\n        titlealign=:left\n    )\n    xlims!(-0.05, 0.85)\n    ylims!(-0.05, 0.85)\n\n    ablines!(axc, 0, 1, color=(:grey, 0.4), linewidth=4)\n\n    # LG = scatter!(axc, df.Gₛ, df.GssimLG,\n    #     color=fill_lg,\n    #     markersize=ms,\n    #     strokecolor=color_lg,\n    #     strokewidth=stw,\n    #     label=\"LeafGasExchange.jl\"\n    # )\n    # PE = scatter!(axc, df.Gₛ, df.GssimPE,\n    #     color=fill_pe,\n    #     markersize=ms,\n    #     strokecolor=color_pe,\n    #     label=\"plantecophys\",\n    #     strokewidth=stw,\n    # )\n    PB = scatter!(axc, df.Gₛ, df.GssimPB,\n        color=fill_pb,\n        markersize=ms,\n        strokecolor=color_pb,\n        strokewidth=stw,\n        label=\"PlantBiophysics.jl\"\n    )\n\n    axislegend(\n        axc,\n        [PB],\n        [\n            \"nRMSE: \" * string(filter(x -&gt; x.variable == \"Gs\" && x.origin == \"PlantBiophysics.jl\", stats).nRMSE[1]),\n            # \"nRMSE: \" * string(filter(x -&gt; x.variable == \"Gs\" && x.origin == \"plantecophys\", stats).nRMSE[1]),\n            # \"nRMSE: \" * string(filter(x -&gt; x.variable == \"Gs\" && x.origin == \"LeafGasExchange.jl\", stats).nRMSE[1]),\n        ],\n        \"\",\n        position=:rb,\n        orientation=:vertical,\n        labelsize=legend_lab_size,\n        padding=0.0,\n        framevisible=false\n    )\n\n\n    # Leaf temperature\n    axd = Axis(fig[2, 3], title=\"(d) Leaf temperature (Tₗ)\", aspect=1, titlealign=:left)\n    ablines!(axd, 0, 1, color=(:grey, 0.4), linewidth=4)\n\n    # LG = scatter!(axd, df.Tₗ, df.TlsimLG,\n    #     color=fill_lg,\n    #     markersize=ms,\n    #     strokecolor=color_lg,\n    #     strokewidth=stw\n    # )\n    # PE = scatter!(axd, df.Tₗ, df.TlsimPE,\n    #     color=fill_pe,\n    #     markersize=ms,\n    #     strokecolor=color_pe,\n    #     strokewidth=stw\n    # )\n    PB = scatter!(axd, df.Tₗ, df.TlsimPB,\n        color=fill_pb,\n        markersize=ms,\n        strokecolor=color_pb,\n        strokewidth=stw\n    )\n\n    xlims!(10.0, 36.0)\n    ylims!(10.0, 36.0)\n\n    axislegend(\n        axd, [PB],\n        [\n            \"nRMSE: \" * string(filter(x -&gt; x.variable == \"Tl\" && x.origin == \"PlantBiophysics.jl\", stats).nRMSE[1]),\n            # \"nRMSE: \" * string(filter(x -&gt; x.variable == \"Tl\" && x.origin == \"plantecophys\", stats).nRMSE[1]),\n            # \"nRMSE: \" * string(filter(x -&gt; x.variable == \"Tl\" && x.origin == \"LeafGasExchange.jl\", stats).nRMSE[1]),\n        ],\n        \"\", position=:rb,\n        orientation=:vertical,\n        labelsize=legend_lab_size,\n        padding=0.0,\n        framevisible=false\n    )\n\n    Legend(\n        fig[4, 1:end],\n        axc,\n        orientation=:horizontal,\n        framevisible=false,\n        padding=0.0\n    )\n    fig\nend\n\n\n\n\n\nFigure 1. Measured (x) and simulated (y) net carbon assimilation (a), net transpiration rate (b), stomatal conductance for CO2 (c) and leaf temperature (d). Data comes from Eucalyptus delegatensis (Medlyn et al., 2015). All simulations were performed using a photosynthesis-stomatal conductance-energy balance coupled model with PlantBiophysics.jl. Grey line represents x=y. All simulations were done with Ca &gt; 150 ppm\nThe full validation that includes all three packages would give the following plot:\n\n\n\nFull validation plot"
  },
  {
    "objectID": "notebooks/evaluation/Fig3/Fig3_PlantBiophysics_global_evaluation.html#references",
    "href": "notebooks/evaluation/Fig3/Fig3_PlantBiophysics_global_evaluation.html#references",
    "title": "Global evaluation of PlantBiophysics.jl: observations vs simulations",
    "section": "References",
    "text": "References\n\nTableOfContents(title=\"📚 Table of Contents\", indent=true, depth=4, aside=true)"
  },
  {
    "objectID": "notebooks/evaluation/Fig6/Fig6_PlantBiophysics_day_evaluation.html",
    "href": "notebooks/evaluation/Fig6/Fig6_PlantBiophysics_day_evaluation.html",
    "title": "PlantBiophysics.jl evaluation at daily scale",
    "section": "",
    "text": "using Pkg\nPkg.activate(\".\")\n\n  Activating project at `~/Documents/Codes_divers/PlantBiophysics-paper-Quarto/notebooks/evaluation/Fig6`\n### A Pluto.jl notebook ###\n# v0.19.23\n\nusing Markdown\nusing InteractiveUtils\n\n# This Pluto notebook uses @bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of @bind gives bound variables a default value (instead of an error).\nmacro bind(def, element)\n    quote\n        local iv = try Base.loaded_modules[Base.PkgId(Base.UUID(\"6e696c72-6542-2067-7265-42206c756150\"), \"AbstractPlutoDingetjes\")].Bonds.initial_value catch; b -&gt; missing; end\n        local el = $(esc(element))\n        global $(esc(def)) = Core.applicable(Base.get, el) ? Base.get(el) : iv(el)\n        el\n    end\nend\n\n\n@bind (macro with 1 method)\nbegin\n    using PlantBiophysics, PlantSimEngine, PlantMeteo\n    import PlantBiophysics.gs_closure\n    using DataFrames, CSV, Downloads\n    using Statistics\n    using MonteCarloMeasurements\n    using CairoMakie, Colors\n    using Dates\n    using PlutoUI\n    using Interact\n    unsafe_comparisons(true)\n    constants = Constants();\n    nothing\nend\n\n\n\nThe WebIO Jupyter extension was not detected. See the\n\n    WebIO Jupyter integration documentation\n\nfor more information.\n\n\n\n┌ Info: Unsafe comparisons using the function `pmean` has been enabled globally. Use `@unsafe` to enable in a local expression only or `unsafe_comparisons(false)` to turn off unsafe comparisons\n└ @ MonteCarloMeasurements /Users/arsouze/.julia/packages/MonteCarloMeasurements/4G9w2/src/MonteCarloMeasurements.jl:74"
  },
  {
    "objectID": "notebooks/evaluation/Fig6/Fig6_PlantBiophysics_day_evaluation.html#downloading-and-filtering-data",
    "href": "notebooks/evaluation/Fig6/Fig6_PlantBiophysics_day_evaluation.html#downloading-and-filtering-data",
    "title": "PlantBiophysics.jl evaluation at daily scale",
    "section": "Downloading and filtering data",
    "text": "Downloading and filtering data\nThe data is from Medlyn et al. (2015), see here.\n\ndf_Medlyn = let\n    df_ = read_licor6400(Downloads.download(\"https://figshare.com/ndownloader/files/3402638\"))\n    df_.Asim .= df_.Esim .= df_.Gssim .= df_.Dlsim .= df_.Tlsim .= 0. ± 0.\n    transform!(\n        df_,\n        [:Date,:Time]=&gt; ((x,y) -&gt; Date.(x, dateformat\"d/m/Y\") .+ y) =&gt; :date\n    )\n    df_\nend;\n\n\n\ndf_curves = let\n    df_ = read_licor6400(Downloads.download(\"https://figshare.com/ndownloader/files/3402635\"))\n    df_.Asim .= df_.Esim .= df_.Gssim .= df_.Dlsim .= df_.Tlsim .= 0. ± 0.\n    transform!(\n        df_,\n        :Date =&gt; (x -&gt; Dates.format.(Date.(x, dateformat\"Y/m/d\"), dateformat\"d/m/Y\")) =&gt; :Date,\n        [:Date,:Time]=&gt; ((x,y) -&gt; Date.(x, dateformat\"Y/m/d\") .+ y) =&gt; :date\n    )\n    df_\nend;"
  },
  {
    "objectID": "notebooks/evaluation/Fig6/Fig6_PlantBiophysics_day_evaluation.html#implementation-of-forcedgs",
    "href": "notebooks/evaluation/Fig6/Fig6_PlantBiophysics_day_evaluation.html#implementation-of-forcedgs",
    "title": "PlantBiophysics.jl evaluation at daily scale",
    "section": "Implementation of ForcedGs",
    "text": "Implementation of ForcedGs\nWe need a model that force the stomatal conductance to the measurement. To do so, we implement the ForcedGs model in PlantSimEngine.\n\nbegin\n    \"\"\"\n        ForcedGs()\n    \n    A stomatal conductance model that forces the stomatal conductance to the value of `Gₛ` in the status.\n    \n    It usually is used to force the stomatal conductance to the value measured in the chamber.\n    \n    \"\"\"\n    struct ForcedGs &lt;: PlantBiophysics.AbstractStomatal_ConductanceModel \n        g0\n    end\n\n    ForcedGs() = ForcedGs(0.0)\n    \n    # We implement a method for gs_closure as it is used in the photosynthesis model:\n    function PlantBiophysics.gs_closure(::ForcedGs, models, status, meteo=missing, constants=nothing, extra=nothing)\n        # first iteration, we take measured Gs as a proxy:\n        if status.A &lt; 1e-9 \n            status.Gₛ\n        else\n            # Then we compute it using A from the previous iteration:\n            status.A / (status.Gₛ - models.stomatal_conductance.g0)\n        end\n    end;\n\n    # We implement the model as a method for run!:\n    function PlantSimEngine.run!(\n        ::ForcedGs,\n        models,\n        status,\n        meteo::M,\n        constants=Constants(),\n        extra=nothing,\n    ) where {M&lt;:PlantMeteo.AbstractAtmosphere}\n        status.Gₛ\n    end\n    \n    # We also implement a method for run! with a gs_closure (this is called from FvCB):\n    function PlantSimEngine.run!(::ForcedGs, models, status, gs_closure, extra=nothing)\n        status.Gₛ\n    end\n    \n    # Now we declared the inputs:\n    function PlantSimEngine.inputs_(::ForcedGs)\n        (Gₛ=-Inf,)\n    end\n\n    # And the outputs:\n    function PlantSimEngine.outputs_(::ForcedGs)\n        (Gₛ=-Inf,)\n    end\n    \n    @doc ForcedGs\nend\n\n\nForcedGs()\nA stomatal conductance model that forces the stomatal conductance to the value of Gₛ in the status.\nIt usually is used to force the stomatal conductance to the value measured in the chamber."
  },
  {
    "objectID": "notebooks/evaluation/Fig6/Fig6_PlantBiophysics_day_evaluation.html#user-parameters",
    "href": "notebooks/evaluation/Fig6/Fig6_PlantBiophysics_day_evaluation.html#user-parameters",
    "title": "PlantBiophysics.jl evaluation at daily scale",
    "section": "User parameters",
    "text": "User parameters\nChoose a tree and a date of measurement in the dataset:\n\n@bind tree PlutoUI.NumberField(minimum(df_Medlyn.Tree):maximum(df_Medlyn.Tree), default=3) \n\n\n\n\n\nbegin\n    dates_tree = Dict(tree =&gt; unique(filter(x -&gt; x.Tree == tree, df_Medlyn).Date) for tree in unique(df_Medlyn.Tree))\n    @bind date Select(dates_tree[tree])\nend\n\n14/11/200112/02/20026/05/2002\n\n\n!!! note Prefer using leaf class 1 as leaf class 0 were not fully expanded at the time of measurement.\nSelecting the data:\n\ndf = filter(\n    row -&gt; row.Date == date && row.Tree == tree,# && row[\"Age Class\"] == 1,\n    df_Medlyn\n);\n\n\ndf_curve_leaf = filter(\n    row -&gt; row.Date == date && row[\"Leaf Age\"] == 1,\n    df_curves\n);\n\n\nSelect the columns related to the meteorology and add some uncertainty to the measurement:\n\nmeteo = let\n    meteo_df = select(\n        df,\n        :date,\n        :T =&gt; (x -&gt; x ± 0.1) =&gt; :T,\n        :T =&gt; (x -&gt; 40.0 ± 10.0) =&gt; :Wind,\n        :P =&gt; (x -&gt; x ± (0.001 * x)) =&gt; :P,\n        :Rh =&gt; (x -&gt; x ± 0.01) =&gt; :Rh,\n        :Cₐ =&gt; (x -&gt; x ± 10.0) =&gt; :Cₐ\n    )\n    Weather(meteo_df, (site = \"Tumbarumba\",))\nend;"
  },
  {
    "objectID": "notebooks/evaluation/Fig6/Fig6_PlantBiophysics_day_evaluation.html#fitting-parameters",
    "href": "notebooks/evaluation/Fig6/Fig6_PlantBiophysics_day_evaluation.html#fitting-parameters",
    "title": "PlantBiophysics.jl evaluation at daily scale",
    "section": "Fitting parameters",
    "text": "Fitting parameters\n\nbegin\n    VcMaxRef,JMaxRef,RdRef,TPURef = PlantSimEngine.fit(Fvcb,df_curve_leaf)\n    # g0,g1 = PlantSimEngine.fit(Medlyn,rename(df_curve_leaf, :gs =&gt; :Gₛ))\nend\n\n\n(VcMaxRef = 70.15156414285369, JMaxRef = 151.8701818252424, RdRef = 0.0, TPURef = 10.84776270014557, Tᵣ = 20.96488505758621)\n\n\n!!! note g0 and g1 are not fitted because the dataset does not present a Gₛ~VPD curve, and the snap measurements are already used for validation. See the script for an evaluation with a forcing of Gₛ."
  },
  {
    "objectID": "notebooks/evaluation/Fig6/Fig6_PlantBiophysics_day_evaluation.html#simulation",
    "href": "notebooks/evaluation/Fig6/Fig6_PlantBiophysics_day_evaluation.html#simulation",
    "title": "PlantBiophysics.jl evaluation at daily scale",
    "section": "Simulation",
    "text": "Simulation\nHere we simulate the full energy balance of the leaf and store 5 variables: net carbon assimilation A (μmol m⁻² s⁻¹), transpiration E (mol m⁻² s⁻¹), carbon stomatal conductance Gₛ (mol m⁻² s⁻¹), vapour pressure deficit Dₗ (kPa) and leaf temperature Tₗ (°C).\n\ndf_sim = let\n\n    leaf = ModelList(\n        energy_balance=Monteith(maxiter=100),\n        photosynthesis=Fvcb(VcMaxRef=VcMaxRef, JMaxRef=JMaxRef, RdRef=RdRef, TPURef=TPURef),\n        stomatal_conductance=Medlyn(0.01, 3.42),\n        status=(\n            Rₛ=(df.PPFD ± (0.1 * df.PPFD)) / 4.57, # not / 0.48 because it is in the chamber, the source is only PAR\n            sky_fraction=1.0,\n            PPFD=df.PPFD ± (0.1 * df.PPFD),\n            d=Particles(Uniform(0.01, 0.10))\n        ),\n        type_promotion=Dict(Float64 =&gt; Particles{Float64,2000}),\n        variables_check=false\n    )\n\n    # Make the simulation:\n    run!(leaf, meteo)\n\n    # Extract the outputs:\n    df_sim =\n        select(\n            DataFrame(leaf),\n            :A =&gt; :Asim,\n            :λE =&gt; (x -&gt; x ./ (meteo[:λ] .* constants.Mₕ₂ₒ) .* 1000.0)  =&gt; :Esim,\n            :Gₛ =&gt; :Gssim,\n            :Dₗ =&gt; :Dlsim,\n            :Tₗ =&gt; :Tlsim,\n            :PPFD\n        )\n\n    df_sim\nend\n\n\n6×6 DataFrame\n\n\n\nRow\nAsim\nEsim\nGssim\nDlsim\nTlsim\nPPFD\n\n\n\nParticle…\nParticle…\nParticle…\nParticle…\nParticle…\nParticle…\n\n\n\n\n1\n6.15 ± 0.53\n0.871 ± 0.071\n0.121 ± 0.01\n0.425 ± 0.018\n15.3 ± 0.1\n149.0 ± 15.0\n\n\n2\n14.7 ± 0.31\n2.37 ± 0.085\n0.251 ± 0.0077\n0.595 ± 0.053\n17.9 ± 0.4\n1500.0 ± 150.0\n\n\n3\n14.9 ± 0.45\n4.41 ± 0.085\n0.186 ± 0.0036\n1.44 ± 0.063\n25.4 ± 0.3\n1510.0 ± 150.0\n\n\n4\n15.1 ± 0.38\n4.01 ± 0.076\n0.192 ± 0.0031\n1.27 ± 0.056\n22.0 ± 0.32\n1500.0 ± 150.0\n\n\n5\n5.54 ± 0.49\n1.73 ± 0.13\n0.0723 ± 0.0057\n1.38 ± 0.03\n22.2 ± 0.12\n149.0 ± 15.0\n\n\n6\n7.15 ± 0.62\n1.86 ± 0.14\n0.0958 ± 0.0078\n1.13 ± 0.03\n22.7 ± 0.12\n199.0 ± 20.0\n\n\n\n\n\n\nWe also make a simulation forcing the stomatal conductance to the measurement:\n\ndf_sim_forcedGs = let\n    leaf = ModelList(\n        Monteith(maxiter=100),\n        Fvcb(VcMaxRef=VcMaxRef, JMaxRef=JMaxRef, RdRef=RdRef, TPURef=TPURef),\n        ForcedGs(),\n        status=(\n            Rₛ=(df.PPFD ± (0.1 * df.PPFD)) / 4.57,\n            sky_fraction=1.0,\n            PPFD=df.PPFD ± (0.1 * df.PPFD),\n            d=Particles(Uniform(0.01, 0.10)),\n            Gₛ=df.Gₛ ± 0.0,\n        ),\n        type_promotion=Dict(Float64 =&gt; Particles{Float64,2000}),\n        variables_check=false,\n    )\n\n    # Make the simulation:\n    run!(leaf, meteo)\n\n    # Extract the outputs:\n    df_ = select(\n        DataFrame(leaf),\n        :A =&gt; :Asim,\n        :λE =&gt; (x -&gt; x ./ (meteo[:λ] .* constants.Mₕ₂ₒ) .* 1000.0) =&gt; :Esim,\n        :Gₛ =&gt; :Gssim,\n        :Dₗ =&gt; :Dlsim,\n        :Tₗ =&gt; :Tlsim,\n        :PPFD,\n    )\n    df_\nend\n\n\n6×6 DataFrame\n\n\n\nRow\nAsim\nEsim\nGssim\nDlsim\nTlsim\nPPFD\n\n\n\nParticle…\nParticle…\nParticle…\nParticle…\nParticle…\nParticle…\n\n\n\n\n1\n6.4 ± 0.56\n1.35 ± 0.071\n0.199\n0.413 ± 0.017\n15.2 ± 0.11\n150.0 ± 15.0\n\n\n2\n16.6 ± 0.34\n2.45 ± 0.14\n0.261 ± 2.8e-16\n0.593 ± 0.051\n17.8 ± 0.38\n1500.0 ± 150.0\n\n\n3\n19.2 ± 0.49\n4.81 ± 0.14\n0.208\n1.42 ± 0.058\n25.3 ± 0.28\n1510.0 ± 150.0\n\n\n4\n18.8 ± 0.42\n1.99 ± 0.082\n0.0858\n1.35 ± 0.072\n22.5 ± 0.42\n1500.0 ± 150.0\n\n\n5\n6.04 ± 0.53\n1.95 ± 0.056\n0.0822\n1.37 ± 0.03\n22.1 ± 0.13\n150.0 ± 14.0\n\n\n6\n7.75 ± 0.66\n1.25 ± 0.033\n0.0618\n1.16 ± 0.028\n22.8 ± 0.1\n200.0 ± 20.0"
  },
  {
    "objectID": "notebooks/evaluation/Fig6/Fig6_PlantBiophysics_day_evaluation.html#plotting-results",
    "href": "notebooks/evaluation/Fig6/Fig6_PlantBiophysics_day_evaluation.html#plotting-results",
    "title": "PlantBiophysics.jl evaluation at daily scale",
    "section": "Plotting results",
    "text": "Plotting results\n\n\"\"\"\n    plot_var(ax, var_meas, var_sim)\n\nMake a plot for one variable.\n\n#### Arguments\n\n- `ax`: the figure axis\n- `var_meas`: measured variable\n- `var_sim`: simulated variable\n\"\"\"\nfunction plot_var(ax, var_meas, var_sim)\n    line_color = Colors.RGB(([67, 101, 139] ./ 255)...)\n    error_color = line_color\n    point_color = Colors.RGB(253 / 255, 100 / 255, 103 / 255)\n    point_fill = Colors.RGBA(253 / 255, 100 / 255, 103 / 255, 0.5)\n\n    scatter!(\n        ax,\n        var_meas,\n        color=point_fill,\n        markersize=12,\n        label=\"Measurement\",\n        strokecolor=point_color,\n        strokewidth=3\n    )\n\n    lines!(\n        ax,\n        pmean.(var_sim),\n        color=line_color,\n        linewidth=2.5,\n        label=\"Simulation ± 95% confidence interval\"\n    )\n\n    errorbars!(\n        ax,\n        eachindex(var_sim),\n        pmean.(var_sim),\n        pstd.(var_sim),\n        pstd.(var_sim),\n        color=error_color,\n        whiskerwidth=5,\n        linewidth=2\n    )\nend\n\n\nplot_var\n\n\n\nlet\n    noto_sans = assetpath(\"fonts\", \"NotoSans-Regular.ttf\")\n    x_labs = (eachindex(df.Tlsim), Dates.format.(df.Time, dateformat\"HH:MM\"))\n    # size_inches = (6.7, 5)\n    size_inches = (10, 7)\n    size_pt = 72 .* size_inches\n    fig = Figure(\n        font=noto_sans,\n        resolution=size_pt,\n        fontsize=12,\n        xminorgridstyle=true\n    )\n\n    ga = fig[1, 1] = GridLayout()\n\n    # axDl = Axis(ga[1, 1], ylabel=\"Dₗ (kPa)\")\n    # plot_var(axDl, df.Dₗ, df_sim.Dlsim)\n    axDl = Axis(ga[1, 1], ylabel=\"Gₛ (mol m⁻² s⁻¹)\")\n    plot_var(axDl, df.Gₛ, df_sim.Gssim)\n\n    axTl = Axis(ga[1, 2], ylabel=\"Tₗ (°C)\")\n    plot_var(axTl, df.Tₗ, df_sim.Tlsim)\n\n    hidexdecorations!(axDl, grid=false)\n    hidexdecorations!(axTl, grid=false)\n\n    axA = Axis(ga[2, 1], xlabel=\"Time (HH:MM)\", ylabel=\"A (μmol m⁻² s⁻¹)\")\n    axA.xticks = deepcopy(x_labs)\n    plot_var(axA, df.A, df_sim.Asim)\n\n    axE = Axis(ga[2, 2], xlabel=\"Time (HH:MM)\", ylabel=\"Tr (mol m⁻² s⁻¹)\")\n    axE.xticks = deepcopy(x_labs)\n    plot_var(axE, df.Trmmol, df_sim.Esim)\n\n    rowgap!(ga, 10)\n    Legend(fig[2, 1], axDl, orientation=:horizontal, framevisible=false, padding=0.0)\n    fig\nend\n\n\n\n\n\nFigure 1. Measurement and simulation of the leaf-to-air vapor pressure deficit (Dₗ), leaf temperature (Tₗ), carbon assimilation (A) and transpiration (Tr) of a leaf in snap measurements from Medlyn et al. (2015). The photosynthesis is simulated using the model from Farquhar et al. (1980) with the analytical resolution proposed by Leuning et al. (1995) and fitted on A-Cᵢ curves data. The energy balance is simulated using the model of Monteith et al. (2013) corrected by Schymanski et al. (2017). The stomatal conductance is simulated using the model of Medlyn et al. (2011) with forced parameter fitted to match the snap measurements.\nForcing Gₛ would give results such as:\n\nfig = let\n    noto_sans = assetpath(\"fonts\", \"NotoSans-Regular.ttf\")\n    x_labs = (eachindex(df.Tlsim), Dates.format.(df.Time, dateformat\"HH:MM\"))\n    # size_inches = (6.7, 5)\n    size_inches = (10, 7)\n    size_pt = 72 .* size_inches\n    fig = Figure(font=noto_sans, resolution=size_pt, fontsize=12, xminorgridstyle=true)\n\n    ga = fig[1, 1] = GridLayout()\n\n    axDl = Axis(ga[1, 1], ylabel=\"Dₗ (kPa)\")\n    plot_var(axDl, df.Dₗ, df_sim_forcedGs.Dlsim)\n    # axDl = Axis(ga[1, 1], ylabel=\"Gₛ (mol m⁻² s⁻¹)\")\n    # plot_var(axDl, df.Gₛ, df_sim.Gssim)\n\n    axTl = Axis(ga[1, 2], ylabel=\"Tₗ (°C)\")\n    plot_var(axTl, df.Tₗ, df_sim_forcedGs.Tlsim)\n\n    hidexdecorations!(axDl, grid=false)\n    hidexdecorations!(axTl, grid=false)\n\n    axA = Axis(ga[2, 1], xlabel=\"Time (HH:MM)\", ylabel=\"A (μmol m⁻² s⁻¹)\")\n    axA.xticks = deepcopy(x_labs)\n    plot_var(axA, df.A, df_sim_forcedGs.Asim)\n\n    axE = Axis(ga[2, 2], xlabel=\"Time (HH:MM)\", ylabel=\"Tr (mol m⁻² s⁻¹)\")\n    axE.xticks = deepcopy(x_labs)\n    plot_var(axE, df.Trmmol, df_sim_forcedGs.Esim)\n\n    rowgap!(ga, 10)\n    Legend(fig[2, 1], axDl, orientation=:horizontal, framevisible=false, padding=0.0)\n    fig\nend\n\n\n\n\n\nFigure 2. Measurement and simulation of the leaf-to-air vapor pressure deficit (Dₗ), leaf temperature (Tₗ), carbon assimilation (A) and transpiration (Tr) of a leaf in snap measurements from Medlyn et al. (2015). The photosynthesis is simulated using the model from Farquhar et al. (1980) with the analytical resolution proposed by Leuning et al. (1995) and fitted on A-Cᵢ curves data. The energy balance is simulated using the model of Monteith et al. (2013) corrected by Schymanski et al. (2017). The stomatal conductance is forced.\n\nsave(\"figure_day.png\", fig, px_per_unit=3);"
  },
  {
    "objectID": "notebooks/evaluation/Fig6/Fig6_PlantBiophysics_day_evaluation.html#statistics",
    "href": "notebooks/evaluation/Fig6/Fig6_PlantBiophysics_day_evaluation.html#statistics",
    "title": "PlantBiophysics.jl evaluation at daily scale",
    "section": "Statistics",
    "text": "Statistics\n\n\"\"\"\n    nRMSE(obs,sim)\n\nReturns the normalized Root Mean Squared Error between observations `obs` and simulations `sim`.\nThe closer to 0 the better.\n\"\"\"\nfunction nRMSE(obs, sim; digits=2)\n    return round(sqrt(sum((obs .- sim) .^ 2) / length(obs)) / (findmax(obs)[1] - findmin(obs)[1]), digits=digits)\nend\n\n\nnRMSE\n\n\n\n\"\"\"\n        Bias(obs,sim)\n\n    Returns the bias between observations `obs` and simulations `sim`.\n    The closer to 0 the better.\n    \"\"\"\nfunction Bias(obs, sim, digits=4)\n    return round(mean(sim .- obs), digits=digits)\nend\n\n\nBias\n\n\n\n\"\"\"\n    nBias(obs,sim; digits = 2)\n\nReturns the normalised bias (%) between observations `obs` and simulations `sim`.\nThe closer to 0 the better.\n\"\"\"\nfunction nBias(obs, sim; digits=2)\n    return round(mean((sim .- obs)) / (findmax(obs)[1] - findmin(obs)[1]), digits=digits)\nend\n\n\nnBias\n\n\n\n\"\"\"\n    EF(obs,sim)\n\nReturns the Efficiency Factor between observations `obs` and simulations `sim` using NSE (Nash-Sutcliffe efficiency) model.\nMore information can be found at https://en.wikipedia.org/wiki/Nash%E2%80%93Sutcliffe_model_efficiency_coefficient.\nThe closer to 1 the better.\n\"\"\"\nfunction EF(obs, sim, digits=2)\n    SSres = sum((obs - sim) .^ 2)\n    SStot = sum((obs .- mean(obs)) .^ 2)\n    return round(1 - SSres / SStot, digits=digits)\nend\n\n\nEF\n\n\n\nlet\n    df_vec = []\n    vars = [:Dₗ, :Tₗ, :A, :Tr]\n    for var in [df.Dₗ =&gt; df_sim_forcedGs.Dlsim, df.Tₗ =&gt; df_sim_forcedGs.Tlsim, df.A =&gt; df_sim_forcedGs.Asim, df.Trmmol =&gt; df_sim_forcedGs.Esim]\n        var_ = popfirst!(vars)\n        var_vec = Any[:variable =&gt; var_]\n        for fn in [RMSE, nRMSE, EF, Bias, nBias]\n            push!(var_vec, Symbol(fn) =&gt; fn(var.first, var.second))\n        end\n    push!(df_vec, (;var_vec...))\n    end\n\n    DataFrame(df_vec)\nend\n\n\n4×6 DataFrame\n\n\n\nRow\nvariable\nRMSE\nnRMSE\nEF\nBias\nnBias\n\n\n\nSymbol\nParticle…\nParticle…\nParticle…\nParticle…\nParticle…\n\n\n\n\n1\nDₗ\n0.0981 ± 0.024\n0.107 ± 0.026\n0.926 ± 0.039\n0.0784 ± 0.024\n0.085 ± 0.026\n\n\n2\nTₗ\n0.56 ± 0.13\n0.0582 ± 0.014\n0.968 ± 0.017\n0.469 ± 0.14\n0.0487 ± 0.015\n\n\n3\nA\n2.06 ± 0.2\n0.141 ± 0.014\n0.864 ± 0.027\n0.191 ± 0.21\n0.0131 ± 0.014\n\n\n4\nTr\n0.202 ± 0.051\n0.0617 ± 0.016\n0.963 ± 0.019\n0.141 ± 0.034\n0.0432 ± 0.011"
  },
  {
    "objectID": "notebooks/basic_syntax.html",
    "href": "notebooks/basic_syntax.html",
    "title": "Get started with Julia - live",
    "section": "",
    "text": "### A Pluto.jl notebook ###\n# v0.19.27\n\nusing Markdown\nusing InteractiveUtils\nBefore being able to run this notebook succesfully locally, you will need to set up Julia and Pluto."
  },
  {
    "objectID": "notebooks/basic_syntax.html#variables",
    "href": "notebooks/basic_syntax.html#variables",
    "title": "Get started with Julia - live",
    "section": "Variables",
    "text": "Variables\nWe can define a variable using = (assignment). Then we can use its value in other expressions:\n\nx = 3\n\n3\n\n\n\ny = 2x\n\n6\n\n\nBy default Julia displays the output of the last operation. (You can suppress the output by adding ; (a semicolon) at the end.)\nWe can ask what type a variable has using typeof:\n\ntypeof(y)\n\nInt64"
  },
  {
    "objectID": "notebooks/basic_syntax.html#functions",
    "href": "notebooks/basic_syntax.html#functions",
    "title": "Get started with Julia - live",
    "section": "Functions",
    "text": "Functions\nWe can use a short-form, one-line function definition for simple functions:\n\nf(x) = 2 + x\n\nf (generic function with 1 method)\n\n\nTyping the function’s name gives information about the function. To call it we must use parentheses:\n\nf\n\nf (generic function with 1 method)\n\n\n\nf(10)\n\n12\n\n\nFor longer functions we use the following syntax with the function keyword and end:\n\nfunction g(x, y)\n    z = x + y\n    return z^2\nend\n\ng (generic function with 1 method)\n\n\n\ng(1, 2)\n\n9"
  },
  {
    "objectID": "notebooks/basic_syntax.html#for-loops",
    "href": "notebooks/basic_syntax.html#for-loops",
    "title": "Get started with Julia - live",
    "section": "For loops",
    "text": "For loops\nUse for to loop through a pre-determined set of values:\n\nlet s = 0\n    \n    for i in 1:10\n        s += i    # Equivalent to s = s + i\n    end\n    \n    s\nend\n\n55\n\n\nHere, 1:10 is a range representing the numbers from 1 to 10:\n\ntypeof(1:10)\n\nUnitRange{Int64}\n\n\nAbove we used a let block to define a new local variable s. But blocks of code like this are usually better inside functions, so that they can be reused. For example, we could rewrite the above as follows:\n\nfunction mysum(n)\n    s = 0\n    \n    for i in 1:n\n        s += i    \n    end\n    \n    return s\nend\n\nmysum (generic function with 1 method)\n\n\n\nmysum(100)\n\n5050"
  },
  {
    "objectID": "notebooks/basic_syntax.html#conditionals-if",
    "href": "notebooks/basic_syntax.html#conditionals-if",
    "title": "Get started with Julia - live",
    "section": "Conditionals: if",
    "text": "Conditionals: if\nWe can evaluate whether a condition is true or not by simply writing the condition:\n\na = 3\n\n3\n\n\n\na &lt; 5\n\ntrue\n\n\nWe see that conditions have a Boolean (true or false) value.\nWe can then use if to control what we do based on that value:\n\nif a &lt; 5\n    \"small\"\n    \nelse\n    \"big\"\n    \nend\n\n\"small\"\n\n\nNote that the if also returns the last value that was evaluated, in this case the string \"small\" or \"big\", Since Pluto is reactive, changing the definition of a above will automatically cause this to be reevaluated!"
  },
  {
    "objectID": "notebooks/basic_syntax.html#arrays",
    "href": "notebooks/basic_syntax.html#arrays",
    "title": "Get started with Julia - live",
    "section": "Arrays",
    "text": "Arrays\n\n1D arrays (Vectors)\nWe can make a Vector (1-dimensional, or 1D array) using square brackets:\n\nv = [1, 2, 3]\n\n3-element Vector{Int64}:\n 1\n 2\n 3\n\n\n\ntypeof(v)\n\n\nVector{Int64} (alias for Array{Int64, 1})\n\n\n\nThe 1 in the type shows that this is a 1D array.\nWe access elements also using square brackets:\n\nv[2]\n\n2\n\n\n\nv[2] = 10\n\n10\n\n\nNote that Pluto does not automatically update cells when you modify elements of an array, but the value does change.\nA nice way to create Vectors following a certain pattern is to use an array comprehension:\n\nv2 = [i^2 for i in 1:10]\n\n10-element Vector{Int64}:\n   1\n   4\n   9\n  16\n  25\n  36\n  49\n  64\n  81\n 100\n\n\n\n\n2D arrays (matrices)\nWe can make small matrices (2D arrays) with square brackets too:\n\nM = [1 2\n     3 4]\n\n2×2 Matrix{Int64}:\n 1  2\n 3  4\n\n\n\ntypeof(M)\n\n\nMatrix{Int64} (alias for Array{Int64, 2})\n\n\n\nThe 2 in the type confirms that this is a 2D array.\nThis won’t work for larger matrices, though. For that we can use e.g.\n\nzeros(5, 5)\n\n5×5 Matrix{Float64}:\n 0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0  0.0\n\n\nNote that zeros gives Float64s by default. We can also specify a type for the elements:\n\nzeros(Int, 4, 5)\n\n4×5 Matrix{Int64}:\n 0  0  0  0  0\n 0  0  0  0  0\n 0  0  0  0  0\n 0  0  0  0  0\n\n\nWe can then fill in the values we want by manipulating the elements, e.g. with a for loop.\nA nice alternative syntax to create matrices following a certain pattern is an array comprehension with a double for loop:\n\n[i + j for i in 1:5, j in 1:6]\n\n5×6 Matrix{Int64}:\n 2  3  4  5   6   7\n 3  4  5  6   7   8\n 4  5  6  7   8   9\n 5  6  7  8   9  10\n 6  7  8  9  10  11"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Proof of concept for a Quarto adaptation of a Pluto website !"
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "PlantBiophysics-paper for Quarto",
    "section": "",
    "text": "The material in this repository is licensed as follows:\n\nThe code is under the MIT license.\nThe text is under the CC BY-SA 4.0 license.\n\nCopyright Alan Edelman, David P. Sanders and Fons van der Plas, 2021"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PlantBiophysics-paper-Quarto",
    "section": "",
    "text": "This is the repository for the Jupyter notebooks related to the scientific paper about PlantBiophysics.jl.\nThis is only a Jupyter equivalent from the orginal Pluto website available here"
  },
  {
    "objectID": "installation.html",
    "href": "installation.html",
    "title": "First-time setup: Install Julia & Pluto",
    "section": "",
    "text": "Acknowledgement \\ This material is taken from Computational Thinking, a live online Julia/Pluto textbook. (computationalthinking.mit.edu)\n\n\n\nGo to https://julialang.org/downloads and download the current stable release, using the correct version for your operating system (Linux x86, Mac, Windows, etc).\n\n\n\nAfter installing, make sure that you can run Julia. On some systems, this means searching for the “Julia 1.X.X” (e.g. Julia 1.8.3) program installed on your computer; in others, it means running the command julia in a terminal. Make sure that you can execute 1 + 1:\n\n\n\nimage\n\n\nMake sure that you are able to launch Julia and calculate 1+1 before proceeding!\n\n\n\nNext we will install the Pluto notebook that we will be using during the course. Pluto is a Julia programming environment designed for interactivity and quick experiments.\nOpen the Julia REPL. This is the command-line interface to Julia, similar to the previous screenshot.\nHere you type Julia commands, and when you press ENTER, it runs, and you see the result.\nTo install Pluto, we want to run a package manager command. To switch from Julia mode to Pkg mode, type ] (closing square bracket) at the julia&gt; prompt:\njulia&gt; ]\n\n(@v1.9) pkg&gt;\nThe line turns blue and the prompt changes to pkg&gt;, telling you that you are now in package manager mode. This mode allows you to do operations on packages (also called libraries).\nTo install Pluto, run the following (case sensitive) command to add (install) the package to your system by downloading it from the internet. You should only need to do this once for each installation of Julia:\n(@v1.9) pkg&gt; add Pluto\nThis might take a couple of minutes, so you can go get yourself a cup of tea!\n\n\n\nimage\n\n\nYou can now close the terminal.\n\n\n\nWe need a modern browser to view Pluto notebooks with. Firefox and Chrome work best."
  },
  {
    "objectID": "installation.html#step-1-install-julia",
    "href": "installation.html#step-1-install-julia",
    "title": "First-time setup: Install Julia & Pluto",
    "section": "",
    "text": "Go to https://julialang.org/downloads and download the current stable release, using the correct version for your operating system (Linux x86, Mac, Windows, etc)."
  },
  {
    "objectID": "installation.html#step-2-run-julia",
    "href": "installation.html#step-2-run-julia",
    "title": "First-time setup: Install Julia & Pluto",
    "section": "",
    "text": "After installing, make sure that you can run Julia. On some systems, this means searching for the “Julia 1.X.X” (e.g. Julia 1.8.3) program installed on your computer; in others, it means running the command julia in a terminal. Make sure that you can execute 1 + 1:\n\n\n\nimage\n\n\nMake sure that you are able to launch Julia and calculate 1+1 before proceeding!"
  },
  {
    "objectID": "installation.html#step-3-install-pluto",
    "href": "installation.html#step-3-install-pluto",
    "title": "First-time setup: Install Julia & Pluto",
    "section": "",
    "text": "Next we will install the Pluto notebook that we will be using during the course. Pluto is a Julia programming environment designed for interactivity and quick experiments.\nOpen the Julia REPL. This is the command-line interface to Julia, similar to the previous screenshot.\nHere you type Julia commands, and when you press ENTER, it runs, and you see the result.\nTo install Pluto, we want to run a package manager command. To switch from Julia mode to Pkg mode, type ] (closing square bracket) at the julia&gt; prompt:\njulia&gt; ]\n\n(@v1.9) pkg&gt;\nThe line turns blue and the prompt changes to pkg&gt;, telling you that you are now in package manager mode. This mode allows you to do operations on packages (also called libraries).\nTo install Pluto, run the following (case sensitive) command to add (install) the package to your system by downloading it from the internet. You should only need to do this once for each installation of Julia:\n(@v1.9) pkg&gt; add Pluto\nThis might take a couple of minutes, so you can go get yourself a cup of tea!\n\n\n\nimage\n\n\nYou can now close the terminal."
  },
  {
    "objectID": "installation.html#step-4-use-a-modern-browser-mozilla-firefox-or-google-chrome",
    "href": "installation.html#step-4-use-a-modern-browser-mozilla-firefox-or-google-chrome",
    "title": "First-time setup: Install Julia & Pluto",
    "section": "",
    "text": "We need a modern browser to view Pluto notebooks with. Firefox and Chrome work best."
  },
  {
    "objectID": "installation.html#step-1-start-pluto",
    "href": "installation.html#step-1-start-pluto",
    "title": "First-time setup: Install Julia & Pluto",
    "section": "Step 1: Start Pluto",
    "text": "Step 1: Start Pluto\nStart the Julia REPL, like you did during the setup. In the REPL, type:\njulia&gt; using Pluto\n\njulia&gt; Pluto.run()\n\n\n\nimage\n\n\nThe terminal tells us to go to http://localhost:1234/ (or a similar URL). Let’s open Firefox or Chrome and type that into the address bar.\n\n\n\nimage\n\n\n\nIf you’re curious about what a Pluto notebook looks like, have a look at the sample notebooks. Samples 1, 2 and 6 may be useful for learning some basics of Julia programming.\nIf you want to hear the story behind Pluto, have a look a the JuliaCon presentation.\n\nIf nothing happens in the browser the first time, close Julia and try again. And please let us know!"
  },
  {
    "objectID": "installation.html#step-2a-opening-a-notebook-from-the-web",
    "href": "installation.html#step-2a-opening-a-notebook-from-the-web",
    "title": "First-time setup: Install Julia & Pluto",
    "section": "Step 2a: Opening a notebook from the web",
    "text": "Step 2a: Opening a notebook from the web\nThis is the main menu - here you can create new notebooks, or open existing ones. Our homework assignments will always be based on a template notebook, available in this GitHub repository. To start from a template notebook on the web, you can paste the URL into the blue box and press ENTER.\nFor example, homework 0 is available here. Go to this page, and on the top right, click on the button that says “Edit or run this notebook”. From these instructions, copy the notebook link, and paste it into the box. Press ENTER, and select OK in the confirmation box.\n\n\n\nimage\n\n\nThe first thing we will want to do is to save the notebook somewhere on our own computer; see below."
  },
  {
    "objectID": "installation.html#step-2b-opening-an-existing-notebook-file",
    "href": "installation.html#step-2b-opening-an-existing-notebook-file",
    "title": "First-time setup: Install Julia & Pluto",
    "section": "Step 2b: Opening an existing notebook file",
    "text": "Step 2b: Opening an existing notebook file\nWhen you launch Pluto for the second time, your recent notebooks will appear in the main menu. You can click on them to continue where you left off.\nIf you want to run a local notebook file that you have not opened before, then you need to enter its full path into the blue box in the main menu. More on finding full paths in step 3."
  },
  {
    "objectID": "installation.html#step-3-sharing-a-notebook",
    "href": "installation.html#step-3-sharing-a-notebook",
    "title": "First-time setup: Install Julia & Pluto",
    "section": "Step 3: Sharing a notebook",
    "text": "Step 3: Sharing a notebook\nAfter working on your notebook (your code is autosaved when you run it), you will find your notebook file in the folder we created in step 3. This the file that you can share with others, or submit as your homework assignment to Canvas."
  },
  {
    "objectID": "notebooks/upscaling/Fig7_PlantBiophysics_3D_coffee_tree.html",
    "href": "notebooks/upscaling/Fig7_PlantBiophysics_3D_coffee_tree.html",
    "title": "PlantBiophysics.jl 3D global tree simulation",
    "section": "",
    "text": "### A Pluto.jl notebook ###\n# v0.19.23\n\nusing Markdown\nusing InteractiveUtils\nThis Pluto notebook presents the computation of Fig. 7 from the scientific article. It displays leaf temperature on a 3D coffee tree simulated by PlantBiophysics.jl. Non-Pluto Julia script is also available (see here)."
  },
  {
    "objectID": "notebooks/upscaling/Fig7_PlantBiophysics_3D_coffee_tree.html#importing-the-dependencies",
    "href": "notebooks/upscaling/Fig7_PlantBiophysics_3D_coffee_tree.html#importing-the-dependencies",
    "title": "PlantBiophysics.jl 3D global tree simulation",
    "section": "Importing the dependencies:",
    "text": "Importing the dependencies:\nLoading the Julia packages:\n\nbegin\n    using PlantBiophysics, PlantGeom, PlantMeteo, PlantSimEngine\n    using CairoMakie\n    using BenchmarkTools\n    using FLoops\n    using Downloads\n    using Dates, DataFrames, CSV, Statistics\n    using MultiScaleTreeGraph\n    using PlutoUI\n    nothing\nend"
  },
  {
    "objectID": "notebooks/upscaling/Fig7_PlantBiophysics_3D_coffee_tree.html#reading-data",
    "href": "notebooks/upscaling/Fig7_PlantBiophysics_3D_coffee_tree.html#reading-data",
    "title": "PlantBiophysics.jl 3D global tree simulation",
    "section": "Reading data",
    "text": "Reading data\n\nMTG file\n\nmtg = read_opf(Downloads.download(\"https://raw.githubusercontent.com/VEZY/PlantBiophysics-paper/main/notebooks/upscaling/coffee.opf\"))\n\n\n/ 1: Individual\n└─ / 2: Axis\n   ├─ &lt; 5: Metamer\n   ├─ &lt; 799: Metamer\n   │  ├─ + 800: Axis\n   │  │  ├─ &lt; 806: Metamer\n   │  │  │  └─ + 807: Axis\n   │  │  │     ├─ / 808: Metamer\n   │  │  │     ├─ &lt; 810: Metamer\n   │  │  │     ├─ &lt; 814: Metamer\n   │  │  │     │  ├─ + 816: Leaf\n   │  │  │     │  └─ + 815: Leaf\n   │  │  │     ├─ &lt; 811: Metamer\n   │  │  │     │  ├─ + 813: Leaf\n   │  │  │     │  └─ + 812: Leaf\n   │  │  │     ├─ &lt; 809: Metamer\n   │  │  │     └─ &lt; 817: Metamer\n   │  │  │        └─ + 818: Leaf\n   │  │  ├─ &lt; 939: Metamer\n   │  │  │  ├─ + 940: Leaf\n   │  │  │  └─ + 941: Leaf\n   │  │  ├─ &lt; 803: Metamer\n   │  │  ├─ &lt; 926: Metamer\n   │  │  ├─ &lt; 936: Metamer\n   │  │  │  ├─ + 938: Leaf\n   │  │  │  └─ + 937: Leaf\n   │  │  ├─ &lt; 899: Metamer\n   │  │  ├─ &lt; 842: Metamer\n   │  │  │  ├─ + 869: Axis\n   │  │  │  │  ├─ &lt; 875: Metamer\n…\n\n\n\n\nMeteorological data\n\nweather = PlantMeteo.read_weather(Downloads.download(\"https://raw.githubusercontent.com/VEZY/PlantBiophysics-paper/main/notebooks/upscaling/meteo.csv\"),\n    :temperature =&gt; :T,\n    :relativeHumidity =&gt; (x -&gt; x ./ 100) =&gt; :Rh,\n    :wind =&gt; :Wind,\n    :VPD =&gt; (x -&gt; x ./ 100.0) =&gt; :VPD,\n    :atmosphereCO2_ppm =&gt; :Cₐ,\n    date_format=DateFormat(\"yyyy/mm/dd\")\n);\n\n\n\n\nModels list\n\nmodels = read_model(Downloads.download(\"https://raw.githubusercontent.com/VEZY/PlantBiophysics-paper/main/notebooks/upscaling/plant_coffee.yml\"));\n\n[ Info: Some variables must be initialized before simulation: (interception = (:Rᵢ,),) (see `to_initialize()`)\n[ Info: Using default values for parameters [:aₛₕ, :aₛᵥ, :ε, :ΔT] in model Monteith\n\n\n\nmodels[\"Leaf\"]\n\n\n\n╭──── Dependency graph ──────────────────────────────────────────────────╮\n│  ╭──── interception ─────────────╮                                     │\n│  │  ╭──── Main model ─────────╮  │                                     │\n│  │  │  Process: interception  │  │                                     │\n│  │  │  Model: Translucent     │  │                                     │\n│  │  │  Dep: nothing           │  │                                     │\n│  │  ╰─────────────────────────╯  │                                     │\n│  ╰───────────────────────────────╯                                     │\n│  ╭──── energy_balance ──────────────────────────────────────────────╮  │\n│  │  ╭──── Main model ───────────╮                                   │  │\n│  │  │  Process: energy_balance  │                                   │  │\n│  │  │  Model: Monteith          │                                   │  │\n│  │  │  Dep: nothing             │                                   │  │\n│  │  ╰───────────────────────────╯                                   │  │\n│  │                  │  ╭──── Hard-couple... ───────╮                │  │\n│  │                  │  │  Process: photosynthesis  │                │  │\n│  │                  └──│  Model: Fvcb              │                │  │\n│  │                     ╰───────────────────────────╯                │  │\n│  │                          │  ╭──── Hard-coupled model ─────────╮  │  │\n│  │                          │  │  Process: stomatal_conductance  │  │  │\n│  │                          └──│  Model: Medlyn                  │  │  │\n│  │                             ╰─────────────────────────────────╯  │  │\n│  ╰──────────────────────────────────────────────────────────────────╯  │\n╰────────────────────────────────────────────────────────────────────────╯\nTimeStepTable{Status{(:Rᵢ, :Ra_SW_f, :sky...}(1 x 18):\n╭─────┬─────────┬─────────┬──────────────┬─────────┬─────────┬─────────┬────────\n│ Row │      Rᵢ │ Ra_SW_f │ sky_fraction │       d │      Tₗ │      Rn │ Ra_LW ⋯\n│     │ Float64 │ Float64 │      Float64 │ Float64 │ Float64 │ Float64 │ Float ⋯\n├─────┼─────────┼─────────┼──────────────┼─────────┼─────────┼─────────┼────────\n│   1 │    -Inf │    -Inf │         -Inf │    -Inf │    -Inf │    -Inf │    -I ⋯\n╰─────┴─────────┴─────────┴──────────────┴─────────┴─────────┴─────────┴────────\n                                                              12 columns omitted\n\n\n\n\n\nto_initialize(models[\"Leaf\"])\n\n(interception = (:Rᵢ,), photosynthesis = (:aPPFD,), energy_balance = (:Ra_SW_f, :d, :sky_fraction))\n\n\n\ninit_status!(models[\"Leaf\"], Ra_SW_f = 300.0)"
  },
  {
    "objectID": "notebooks/upscaling/Fig7_PlantBiophysics_3D_coffee_tree.html#adding-light-interception-data-incident-radiation",
    "href": "notebooks/upscaling/Fig7_PlantBiophysics_3D_coffee_tree.html#adding-light-interception-data-incident-radiation",
    "title": "PlantBiophysics.jl 3D global tree simulation",
    "section": "Adding light interception data: incident radiation",
    "text": "Adding light interception data: incident radiation\n\nmtg2 = transform(\n    mtg,\n    [:Ra_PAR_f, :Ra_NIR_f] =&gt; ((x, y) -&gt; x + y * 1.2) =&gt; :Rᵢ, # This would be the incident radiation\n    [:Ra_PAR_f, :Ra_NIR_f] =&gt; ((x, y) -&gt; x + y) =&gt; :Rₛ,\n    :Ra_PAR_f =&gt; (x -&gt; x * 4.57) =&gt; :aPPFD,\n    (x -&gt; 0.3) =&gt; :d,\n    ignore_nothing=true\n)\n\n/ 1: Individual\n└─ / 2: Axis\n   ├─ &lt; 5: Metamer\n   ├─ &lt; 799: Metamer\n   │  ├─ + 800: Axis\n   │  │  ├─ &lt; 806: Metamer\n   │  │  │  └─ + 807: Axis\n   │  │  │     ├─ / 808: Metamer\n   │  │  │     ├─ &lt; 810: Metamer\n   │  │  │     ├─ &lt; 814: Metamer\n   │  │  │     │  ├─ + 816: Leaf\n   │  │  │     │  └─ + 815: Leaf\n   │  │  │     ├─ &lt; 811: Metamer\n   │  │  │     │  ├─ + 813: Leaf\n   │  │  │     │  └─ + 812: Leaf\n   │  │  │     ├─ &lt; 809: Metamer\n   │  │  │     └─ &lt; 817: Metamer\n   │  │  │        └─ + 818: Leaf\n   │  │  ├─ &lt; 939: Metamer\n   │  │  │  ├─ + 940: Leaf\n   │  │  │  └─ + 941: Leaf\n   │  │  ├─ &lt; 803: Metamer\n   │  │  ├─ &lt; 926: Metamer\n   │  │  ├─ &lt; 936: Metamer\n   │  │  │  ├─ + 938: Leaf\n   │  │  │  └─ + 937: Leaf\n   │  │  ├─ &lt; 899: Metamer\n   │  │  ├─ &lt; 842: Metamer\n   │  │  │  ├─ + 869: Axis\n   │  │  │  │  ├─ &lt; 875: Metamer\n…\n\n\n!!! note We use transform instead of transform! here to make a copy of the mtg after modification because we shouldn’t mutate objects in Pluto notebooks."
  },
  {
    "objectID": "notebooks/upscaling/Fig7_PlantBiophysics_3D_coffee_tree.html#running-the-simulation",
    "href": "notebooks/upscaling/Fig7_PlantBiophysics_3D_coffee_tree.html#running-the-simulation",
    "title": "PlantBiophysics.jl 3D global tree simulation",
    "section": "Running the simulation",
    "text": "Running the simulation\n\nbegin\n    mtg_sim = deepcopy(mtg2)\n    # Initialize the models inside the MTG:\n    init_mtg_models!(mtg_sim, models, length(weather), verbose=false)\n    # Make the simulation:\n    run!(mtg_sim, weather)\nend"
  },
  {
    "objectID": "notebooks/upscaling/Fig7_PlantBiophysics_3D_coffee_tree.html#benchmarking",
    "href": "notebooks/upscaling/Fig7_PlantBiophysics_3D_coffee_tree.html#benchmarking",
    "title": "PlantBiophysics.jl 3D global tree simulation",
    "section": "Benchmarking",
    "text": "Benchmarking\nLet’s make a benchmark of the simulation on the whole coffee tree.\n\nbegin\n    mtg_sim_bench = deepcopy(mtg2)\n    # Initialize the models inside the MTG:\n    init_mtg_models!(mtg_sim_bench, models, length(weather), verbose=false)\n    # Make the simulation:\n    times = @benchmark run!($mtg_sim, $weather)\nend\n\n\nBenchmarkTools.Trial: 16 samples with 1 evaluation.\n Range (min … max):  294.873 ms … 351.567 ms  ┊ GC (min … max): 2.61% … 4.54%\n Time  (median):     313.512 ms               ┊ GC (median):    4.80%\n Time  (mean ± σ):   317.894 ms ±  16.451 ms  ┊ GC (mean ± σ):  4.48% ± 0.79%\n  ▃                █                                             \n  █▁▁▁▁▁▇▁▁▇▁▁▁▁▇▁▁█▁▁▁▁▇▁▁▁▁▇▁▁▇▁▁▁▁▁▇▁▁▁▁▁▇▁▁▇▇▁▁▁▁▁▁▁▁▁▁▁▁▁▇ ▁\n  295 ms           Histogram: frequency by time          352 ms &lt;\n Memory estimate: 82.59 MiB, allocs estimate: 1130880.\n\n\n\n\nnleaves = length(findall(traverse(mtg_sim_bench, node -&gt; node.MTG.symbol == \"Leaf\")))\n\n2179\n\n\n\nn_meteo_steps = length(weather)\n\n3\n\n\n\ntotal_time_s = sum(times.times) / length(times.times) * 1e-9\n\n0.3178939979375\n\n\nThe simulation takes \\((round((total_time_s * 1e6) / (nleaves * n_meteo_steps), digits = 1)) μs** to run for each leaf, and **\\)(round(total_time_s, digits = 2)) s for the whole plant on all time-steps.\n!!! warning Benchmarking shouldn’t be done in a Pluto notebook, and especially not on Github CI server that are very slow, but this gives an idea of how fast we can make a simulation, even on very low end hardware, and without parallelization."
  },
  {
    "objectID": "notebooks/upscaling/Fig7_PlantBiophysics_3D_coffee_tree.html#plotting-the-result-in-3d",
    "href": "notebooks/upscaling/Fig7_PlantBiophysics_3D_coffee_tree.html#plotting-the-result-in-3d",
    "title": "PlantBiophysics.jl 3D global tree simulation",
    "section": "Plotting the result in 3D",
    "text": "Plotting the result in 3D\n\nf = let\n    f = Figure()\n    ax = Axis3(f[1, 1], aspect=:data)\n    p = viz!(ax, mtg_sim, color=:Tₗ, index=1)\n    colorbar(f[1, 2], p)\n    f\nend\n\nObservable((27.048340136571866, 38.613736428598415))\n\n\n\n\n\n\nsave(\"3d_coffee.png\", f);"
  },
  {
    "objectID": "notebooks/evaluation/functions.html",
    "href": "notebooks/evaluation/functions.html",
    "title": "PlantBiophysics-paper for Quarto",
    "section": "",
    "text": "\"\"\"\n    RMSE(obs,sim)\nReturns the Root Mean Squared Error between observations `obs` and simulations `sim`.\nThe closer to 0 the better.\n\"\"\"\nfunction RMSE(obs, sim, digits=2)\n    return round(sqrt(sum((obs .- sim) .^ 2) / length(obs)), digits=digits)\nend\n\"\"\"\n    nRMSE(obs,sim)\nReturns the normalized Root Mean Squared Error between observations `obs` and simulations `sim`.\nThe closer to 0 the better.\n\"\"\"\nfunction nRMSE(obs, sim; digits=2)\n    return round(\n        sqrt(sum((obs .- sim) .^ 2) / length(obs)) / (findmax(obs)[1] - findmin(obs)[1]),\n        digits=digits,\n    )\nend\n\"\"\"\n    EF(obs,sim)\nReturns the Efficiency Factor between observations `obs` and simulations `sim` using NSE (Nash-Sutcliffe efficiency) model.\nMore information can be found at https://en.wikipedia.org/wiki/Nash%E2%80%93Sutcliffe_model_efficiency_coefficient.\nThe closer to 1 the better.\n\"\"\"\nfunction EF(obs, sim, digits=2)\n    SSres = sum((obs - sim) .^ 2)\n    SStot = sum((obs .- mean(obs)) .^ 2)\n    return round(1 - SSres / SStot, digits=digits)\nend\n\"\"\"\n        Bias(obs,sim)\n    Returns the bias between observations `obs` and simulations `sim`.\n    The closer to 0 the better.\n    \"\"\"\nfunction Bias(obs, sim, digits=4)\n    return round(mean(sim .- obs), digits=digits)\nend\n\"\"\"\n    nBias(obs,sim; digits = 2)\nReturns the normalised bias (%) between observations `obs` and simulations `sim`.\nThe closer to 0 the better.\n\"\"\"\nfunction nBias(obs, sim; digits=2)\n    return round(mean((sim .- obs)) / (findmax(obs)[1] - findmin(obs)[1]), digits=digits)\nend\n\nnBias"
  },
  {
    "objectID": "notebooks/evaluation/Fig4/Fig4_PlantBiophysics_TaylorDiag.html",
    "href": "notebooks/evaluation/Fig4/Fig4_PlantBiophysics_TaylorDiag.html",
    "title": "Global evaluation of PlantBiophysics.jl : Taylor diagram",
    "section": "",
    "text": "using Pkg\nPkg.activate(\".\")\n\n  Activating project at `~/Documents/Codes_divers/PlantBiophysics-paper-Quarto/notebooks/evaluation/Fig4`\n### A Pluto.jl notebook ###\n# v0.19.27\n\nusing Markdown\nusing InteractiveUtils\nThis Pluto notebook presents the computation of Fig. 4 from the scientific article. The notebook computes a Taylor diagram using results computed and stored in non-Pluto script available here."
  },
  {
    "objectID": "notebooks/evaluation/Fig4/Fig4_PlantBiophysics_TaylorDiag.html#importing-the-dependencies",
    "href": "notebooks/evaluation/Fig4/Fig4_PlantBiophysics_TaylorDiag.html#importing-the-dependencies",
    "title": "Global evaluation of PlantBiophysics.jl : Taylor diagram",
    "section": "Importing the dependencies:",
    "text": "Importing the dependencies:\n\nbegin\n    using Plots, CSV, DataFrames, Colors, Measures, TaylorDiag, PlotlyJS\n    using PlantBiophysics\n    plotlyjs()\nend\n\n\n\nThe WebIO Jupyter extension was not detected. See the\n\n    WebIO Jupyter integration documentation\n\nfor more information.\n\n\n\nPlots.PlotlyJSBackend()"
  },
  {
    "objectID": "notebooks/evaluation/Fig4/Fig4_PlantBiophysics_TaylorDiag.html#reading-the-data",
    "href": "notebooks/evaluation/Fig4/Fig4_PlantBiophysics_TaylorDiag.html#reading-the-data",
    "title": "Global evaluation of PlantBiophysics.jl : Taylor diagram",
    "section": "Reading the data",
    "text": "Reading the data\n\ndf_res = CSV.read(\"df_res.csv\", DataFrame)\n\n\n6684×6 DataFrame6659 rows omitted\n\n\n\nRow\nDate\nvariable\nsimulated\norigin\nCₐ\nmeasured\n\n\n\nDateTime\nString3\nFloat64\nString31\nFloat64\nFloat64\n\n\n\n\n1\n2001-11-14T09:38:00\nA\n9.54724\nPlantBiophysics.jl\n188.35\n10.5883\n\n\n2\n2001-11-14T09:48:00\nA\n19.2821\nPlantBiophysics.jl\n374.267\n21.7167\n\n\n3\n2001-11-14T09:50:00\nA\n30.654\nPlantBiophysics.jl\n760.9\n33.0167\n\n\n4\n2001-11-14T09:52:00\nA\n32.235\nPlantBiophysics.jl\n955.4\n34.8167\n\n\n5\n2001-11-14T09:54:00\nA\n33.4133\nPlantBiophysics.jl\n1155.4\n36.85\n\n\n6\n2001-11-14T09:56:00\nA\n29.3508\nPlantBiophysics.jl\n1157.62\n32.15\n\n\n7\n2001-11-14T09:58:00\nA\n20.3233\nPlantBiophysics.jl\n1168.7\n23.9833\n\n\n8\n2001-11-14T10:00:00\nA\n9.77645\nPlantBiophysics.jl\n1184.58\n10.7583\n\n\n9\n2001-11-14T10:02:00\nA\n5.16737\nPlantBiophysics.jl\n1195.37\n6.26167\n\n\n10\n2001-11-14T10:04:00\nA\n2.59479\nPlantBiophysics.jl\n1197.85\n2.07667\n\n\n11\n2001-11-14T11:11:00\nA\n13.1042\nPlantBiophysics.jl\n344.033\n12.25\n\n\n12\n2001-11-14T11:14:00\nA\n6.99337\nPlantBiophysics.jl\n192.333\n6.88667\n\n\n13\n2001-11-14T11:27:00\nA\n14.3901\nPlantBiophysics.jl\n379.667\n15.1667\n\n\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n⋮\n\n\n6673\n2002-05-10T14:34:00\nGs\n0.32596\nplantecophys\n340.871\n0.210828\n\n\n6674\n2002-05-10T14:37:00\nGs\n0.418032\nplantecophys\n190.586\n0.20828\n\n\n6675\n2002-05-10T14:49:00\nGs\n0.303058\nplantecophys\n379.248\n0.165605\n\n\n6676\n2002-05-10T14:51:00\nGs\n0.198457\nplantecophys\n772.614\n0.157962\n\n\n6677\n2002-05-10T14:54:00\nGs\n0.175361\nplantecophys\n968.895\n0.149045\n\n\n6678\n2002-05-10T14:56:00\nGs\n0.159159\nplantecophys\n1170.17\n0.136306\n\n\n6679\n2002-05-10T14:58:00\nGs\n0.15877\nplantecophys\n1176.07\n0.117834\n\n\n6680\n2002-05-10T15:00:00\nGs\n0.148055\nplantecophys\n1178.16\n0.101911\n\n\n6681\n2002-05-10T15:03:00\nGs\n0.118704\nplantecophys\n1187.72\n0.088535\n\n\n6682\n2002-05-10T15:06:00\nGs\n0.102397\nplantecophys\n1194.74\n0.0732484\n\n\n6683\n2002-05-10T15:10:00\nGs\n0.0927416\nplantecophys\n1196.88\n0.0579618\n\n\n6684\n2002-05-10T15:12:00\nGs\n0.0819242\nplantecophys\n1199.09\n0.0471338"
  },
  {
    "objectID": "notebooks/evaluation/Fig4/Fig4_PlantBiophysics_TaylorDiag.html#computing-statistics",
    "href": "notebooks/evaluation/Fig4/Fig4_PlantBiophysics_TaylorDiag.html#computing-statistics",
    "title": "Global evaluation of PlantBiophysics.jl : Taylor diagram",
    "section": "Computing statistics",
    "text": "Computing statistics\nIn order to display a Taylor diagram, we need two statistics: - standard deviation (i.e. “amplitude” of evaluated data); - correlation (i.e. pattern similarity between two datasets).\nStandard deviations are normalized in order to represent all variables (\\(A\\), \\(E\\), \\(T_l\\), \\(G_s\\)) on the same diagram.\n\nbegin\n    VARS = [\"A\", \"E\", \"Tl\", \"Gs\"]\n    Ss = zeros((4, 3))\n    Cs = zeros((4, 3))\n\n    for i in eachindex(VARS)\n        var = VARS[i]\n\n        # Loading observations and simulations for all three packages\n        obs = filter(x -&gt; (cmp.(x.variable, var) == 0) & (cmp.(x.origin, \"PlantBiophysics.jl\") == 0), df_res).measured\n        modPB = filter(x -&gt; (cmp.(x.variable, var) == 0) & (cmp.(x.origin, \"PlantBiophysics.jl\") == 0), df_res).simulated\n        modPE = filter(x -&gt; (cmp.(x.variable, var) == 0) & (cmp.(x.origin, \"plantecophys\") == 0), df_res).simulated\n        modLG = filter(x -&gt; (cmp.(x.variable, var) == 0) & (cmp.(x.origin, \"LeafGasExchange.jl\") == 0), df_res).simulated\n\n        # Computing standard deviations\n        S = [STD(modPB), STD(modPE), STD(modLG)]\n        S = [S[i] / STD(obs) for i in eachindex(S)] # Normalization\n        Ss[i, :] = S\n\n        # Computing correlations\n        C = [COR(obs, modPB), COR(obs, modPE), COR(obs, modLG)]\n        Cs[i, :] = C\n    end\nend"
  },
  {
    "objectID": "notebooks/evaluation/Fig4/Fig4_PlantBiophysics_TaylorDiag.html#plotting",
    "href": "notebooks/evaluation/Fig4/Fig4_PlantBiophysics_TaylorDiag.html#plotting",
    "title": "Global evaluation of PlantBiophysics.jl : Taylor diagram",
    "section": "Plotting",
    "text": "Plotting\n\nPlotting parameters\n\n\"\"\"\n    rgb(r, g, b, a)\n\nLike `Colors.RGBA` but accepts colors in the 0-255 range.\n\"\"\"\nfunction rgb(r, g, b, a)\n    return RGBA(r / 255, g / 255, b / 255, a)\nend\n\n\nrgb\n\n\n\nbegin\n    # Colors for each package\n    col_pb = (244, 124, 124)    # PlantBiophysics.jl\n    col_lg = (93, 174, 139)     # LeafGasExchange.jl\n    col_pe = (112, 161, 215)    # plantecophys\n    transparency_col = 0.6      # Transparency for edges\n    transparency_fill = 0.4     # Transparency for fill\n    color_pb = rgb(col_pb..., transparency_col)\n    color_pe = rgb(col_lg..., transparency_col)\n    color_lg = rgb(col_pe..., transparency_col)\n    fill_pb = rgb(col_pb..., transparency_fill)\n    fill_pe = rgb(col_lg..., transparency_fill)\n    fill_lg = rgb(col_pe..., transparency_fill)\n\n    cols = [fill_pb, fill_lg, fill_pe]\n    strkcols = [color_pb, color_lg, color_pe]\n\n    # Parameters for fitting\n    msize = 7                   # Marker size\n    stw = 1.5\n    legend_lab_size = 10\n    xleg = 1.6                  # x-position for variables legend\n    yleg = 0.4                  # y-position for variables legend\n    nms = [\"PlantBiophysics.jl\", \"plantecophys\", \"LeafGasExchange.jl\"]\nend\n\n\n\n3-element Vector{String}:\n \"PlantBiophysics.jl\"\n \"plantecophys\"\n \"LeafGasExchange.jl\"\n\n\n\n\nPlotting Taylor diagram\nUsing the same Taylor diagram for all the data is correct thanks to STD normalization.\n\nbegin\n    # Plotting initial Taylor diagram\n    fig = taylordiagram([1], [1], [\"\"], normalize=true, ang=pi / 2, rmsd_circ=false, figsize=600)\n\n    # Adding data label\n    Plots.scatter!([1], [0], label=\"Data\", markerstrokecolor=:black, markercolor=:black)\n    plot!(size=(600, 600))\n    mks = [:circle, :rect, :diamond, :utriangle]\n\n\n    for n in eachindex(mks)\n        rho = Ss[n, :]\n        theta = to_polar(Cs[n, :])\n        for i in 1:length(theta)\n            if n == 1\n                lab = nms[i]\n            else\n                lab = \"\"\n            end\n            Plots.scatter!([cos.(theta[i]) .* rho[i]], [sin.(theta[i]) .* rho[i]], markerstrokecolor=strkcols[i], markercolor=cols[i], markershape=mks[n], markersize=msize, markerstrokewidth=stw, label=lab)\n        end\n        plot!(fontfamily=\"NotoSans-Regular.ttf\", fontsize=12)\n        scatter!([xleg], [yleg - 0.1 * (n - 1)], markerstrokecolor=:grey, markercolor=:grey, markershape=mks[n], markersize=msize, markerstrokewidth=stw, markerstrokealpha=0.6, markeralpha=0.4, label=\"\")\n        annotate!(xleg + 0.05, yleg - 0.1 * (n - 1) - 0.005, text(string(VARS[n]), :left, legend_lab_size))\n    end\n    plot!(legend=:topright, foreground_color_legend=nothing)\nend\n\n\n\n\n\n\nPlots.savefig(fig, \"figure_global_simulation_taylor.png\")\n\n\n\"/Users/arsouze/Documents/Codes_divers/PlantBiophysics-paper-Quarto/notebooks/evaluation/Fig4/figure_global_simulation_taylor.png\"\n\n\n\n\nExplanation\nTaylor diagrams are tools invented and published in the 90s-00s allowing better visualisation of model realism evaluation. Via a clever use of relationship between RMSE, standard deviation and correlation, the Taylor diagram illustrates the accuracy of a model in polar coordinates.\nHere, the \\(\\rho\\) axis represents normalized standard deviation. 1 is the normalized standard deviation of observed data. If a modeled data point is higher (lower) than 1, it means that model induces higher (lower) standard deviation than observed data. For example, green diamond here has a more realistic standard deviation than blue diamond, i.e. blue diamond data tends to have exaggerated amplitudes with respect to data.\nThe \\(\\theta\\) axis represents correlation, i.e. the pattern similarity between observed and modeled data. Two datasets may have similar standard deviation but very different correlations (for instance if a dataset is highly dephased).\n\nToy example\n\nbegin\n    Lx = 100\n    x = range(0, 10, Lx)\n    obs = sin.(x)\n    mod_lowSTD = 1.2 * sin.(x) + sin.(x) .* rand(Lx) * 0.2\n    mod_verylowSTD = 1.6 * sin.(x) + sin.(x) .* rand(Lx) * 0.2\n    mod_lowCOR = sin.(x .+ 0.3) .+ sin.(x) .* rand(Lx) * 0.2\n    mod_verylowCOR = sin.(x .+ 0.6) .+ sin.(x) .* rand(Lx) * 0.2\n\n    Plots.plot(x, obs, label=\"Obs.\", linewidth=3)\n    plot!(x, mod_lowSTD, label=\"Mod. with low STD resolution\")\n    plot!(x, mod_verylowSTD, label=\"Mod. with very low STD resolution\")\n    plot!(x, mod_lowCOR, label=\"Mod. with low correlation resolution\")\n    plot!(x, mod_verylowCOR, label=\"Mod. with very low correlation resolution\")\n    plot!(legend=:outertopright)\n    plot!(size=(650, 400))\nend\n\n\n\n\n\nHere, we represent 5 datasets: - Obs is the target dataset, a sinusoide. - Mod. with low STD resolution the same than ‘Obs’ but with noise and amplified amplitude. - Mod. with very low STD resolution the same than ‘Obs’ but with noise and even more amplified amplitude. - Mod. with low correlation resolution the same than ‘Obs’ but with noise and shifted. - Mod. with very low correlation resolution the same than ‘Obs’ but with noise and even more shifted.\nEach “modeled” dataset is designed to illustrate behaviours on the Taylor diagram presented below.\n\nbegin\n    nmes = [\"Obs\", \"LowSTD\", \"VeryLowSTD\", \"LowCOR\", \"VeryLowCOR\"]\n    S = [STD(obs), STD(mod_lowSTD), STD(mod_verylowSTD), STD(mod_lowCOR), STD(mod_verylowCOR)]\n    S = S / STD(obs)\n    C = [COR(obs, obs), COR(obs, mod_lowSTD), COR(obs, mod_verylowSTD), COR(obs, mod_lowCOR), COR(obs, mod_verylowCOR)]\n    p = taylordiagram(S, C, nmes, rmsd_circ=false, normalize=true)\nend\n\n\n\n\n\nAs expected, the Taylor diagram highlights the main failures of the datasets. The low and very low STD resolution ones have good correlation coefficients (near the \\(y=0\\) axis) but are far away from the Obs point for standard deviation (distant from the center). The low and very low COR resolution ones have similar distance from center than the Obs point but move away from the \\(y=0\\) axis (lower correlation coefficients)."
  }
]