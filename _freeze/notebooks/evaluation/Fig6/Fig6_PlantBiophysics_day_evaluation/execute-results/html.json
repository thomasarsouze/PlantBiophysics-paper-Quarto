{
  "hash": "878ff69a42509dc000adc47b17eeeb88",
  "result": {
    "markdown": "---\ntitle: PlantBiophysics.jl evaluation at daily scale\n---\n\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\nusing Pkg\nPkg.activate(\".\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n  Activating project at `~/Documents/Codes_divers/PlantBiophysics-paper-Quarto/notebooks/evaluation/Fig6`\n```\n:::\n:::\n\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\n### A Pluto.jl notebook ###\n# v0.19.23\n\nusing Markdown\nusing InteractiveUtils\n\n# This Pluto notebook uses @bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of @bind gives bound variables a default value (instead of an error).\nmacro bind(def, element)\n    quote\n        local iv = try Base.loaded_modules[Base.PkgId(Base.UUID(\"6e696c72-6542-2067-7265-42206c756150\"), \"AbstractPlutoDingetjes\")].Bonds.initial_value catch; b -> missing; end\n        local el = $(esc(element))\n        global $(esc(def)) = Core.applicable(Base.get, el) ? Base.get(el) : iv(el)\n        el\n    end\nend\n\n\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n@bind (macro with 1 method)\n```\n:::\n:::\n\n\n\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\nbegin\n\tusing PlantBiophysics, PlantSimEngine, PlantMeteo\n\timport PlantBiophysics.gs_closure\n\tusing DataFrames, CSV, Downloads\n\tusing Statistics\n\tusing MonteCarloMeasurements\n\tusing CairoMakie, Colors\n\tusing Dates\n\tusing PlutoUI\n\tusing Interact\n\tunsafe_comparisons(true)\n\tconstants = Constants();\n\tnothing\nend\n\n\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div style=\"padding: 1em; background-color: #f8d6da; border: 1px solid #f5c6cb; font-weight: bold;\">\n<p>The WebIO Jupyter extension was not detected. See the\n<a href=\"https://juliagizmos.github.io/WebIO.jl/latest/providers/ijulia/\" target=\"_blank\">\n    WebIO Jupyter integration documentation\n</a>\nfor more information.\n</div>\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n┌ Info: Unsafe comparisons using the function `pmean` has been enabled globally. Use `@unsafe` to enable in a local expression only or `unsafe_comparisons(false)` to turn off unsafe comparisons\n└ @ MonteCarloMeasurements /Users/arsouze/.julia/packages/MonteCarloMeasurements/4G9w2/src/MonteCarloMeasurements.jl:74\n```\n:::\n:::\n\n\n\n## Downloading and filtering data\n\n\n\nThe data is from Medlyn et al. (2015), see [here](https://figshare.com/articles/dataset/Tumbarumba_Gas_Exchange/1538079?file=3402641).\n\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\ndf_Medlyn = let\n\tdf_ = read_licor6400(Downloads.download(\"https://figshare.com/ndownloader/files/3402638\"))\n\tdf_.Asim .= df_.Esim .= df_.Gssim .= df_.Dlsim .= df_.Tlsim .= 0. ± 0.\n\ttransform!(\n\t\tdf_,\n\t\t[:Date,:Time]=> ((x,y) -> Date.(x, dateformat\"d/m/Y\") .+ y) => :date\n\t)\n\tdf_\nend;\n\n\n```\n:::\n\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\ndf_curves = let\n\tdf_ = read_licor6400(Downloads.download(\"https://figshare.com/ndownloader/files/3402635\"))\n\tdf_.Asim .= df_.Esim .= df_.Gssim .= df_.Dlsim .= df_.Tlsim .= 0. ± 0.\n\ttransform!(\n\t\tdf_,\n\t\t:Date => (x -> Dates.format.(Date.(x, dateformat\"Y/m/d\"), dateformat\"d/m/Y\")) => :Date,\n\t\t[:Date,:Time]=> ((x,y) -> Date.(x, dateformat\"Y/m/d\") .+ y) => :date\n\t)\n\tdf_\nend;\n\n\n```\n:::\n\n\n\n## Implementation of `ForcedGs`\n\nWe need a model that force the stomatal conductance to the measurement. To do so, we implement the `ForcedGs` model in PlantSimEngine.\n\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\nbegin\n\t\"\"\"\n\t    ForcedGs()\n\t\n\tA stomatal conductance model that forces the stomatal conductance to the value of `Gₛ` in the status.\n\t\n\tIt usually is used to force the stomatal conductance to the value measured in the chamber.\n\t\n\t\"\"\"\n\tstruct ForcedGs <: PlantBiophysics.AbstractStomatal_ConductanceModel \n\t\tg0\n\tend\n\n\tForcedGs() = ForcedGs(0.0)\n\t\n\t# We implement a method for gs_closure as it is used in the photosynthesis model:\n\tfunction PlantBiophysics.gs_closure(::ForcedGs, models, status, meteo=missing, constants=nothing, extra=nothing)\n\t\t# first iteration, we take measured Gs as a proxy:\n\t\tif status.A < 1e-9 \n\t\t\tstatus.Gₛ\n\t\telse\n\t\t\t# Then we compute it using A from the previous iteration:\n\t\t\tstatus.A / (status.Gₛ - models.stomatal_conductance.g0)\n\t\tend\n\tend;\n\n\t# We implement the model as a method for run!:\n\tfunction PlantSimEngine.run!(\n\t    ::ForcedGs,\n\t    models,\n\t    status,\n\t    meteo::M,\n\t    constants=Constants(),\n\t\textra=nothing,\n\t) where {M<:PlantMeteo.AbstractAtmosphere}\n\t    status.Gₛ\n\tend\n\t\n\t# We also implement a method for run! with a gs_closure (this is called from FvCB):\n\tfunction PlantSimEngine.run!(::ForcedGs, models, status, gs_closure, extra=nothing)\n\t    status.Gₛ\n\tend\n\t\n\t# Now we declared the inputs:\n\tfunction PlantSimEngine.inputs_(::ForcedGs)\n\t    (Gₛ=-Inf,)\n\tend\n\n\t# And the outputs:\n\tfunction PlantSimEngine.outputs_(::ForcedGs)\n\t    (Gₛ=-Inf,)\n\tend\n\t\n\t@doc ForcedGs\nend\n\n\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nForcedGs()\n```\n\nA stomatal conductance model that forces the stomatal conductance to the value of `Gₛ` in the status.\n\nIt usually is used to force the stomatal conductance to the value measured in the chamber.\n\n:::\n:::\n\n\n\n## User parameters\n\nChoose a tree and a date of measurement in the dataset:\n\n::: {.cell execution_count=7}\n``` {.julia .cell-code}\n@bind tree PlutoUI.NumberField(minimum(df_Medlyn.Tree):maximum(df_Medlyn.Tree), default=3) \n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<input type='number' min='1' step='1' max='10' value='3'>\n```\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.julia .cell-code}\nbegin\n    dates_tree = Dict(tree => unique(filter(x -> x.Tree == tree, df_Medlyn).Date) for tree in unique(df_Medlyn.Tree))\n\t@bind date Select(dates_tree[tree])\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<select><option value='14/11/2001'>14/11/2001</option><option value='12/02/2002'>12/02/2002</option><option value='6/05/2002'>6/05/2002</option></select>\n```\n:::\n:::\n\n\n\n!!! note\n\tPrefer using leaf class `1` as leaf class `0` were not fully expanded at the time of measurement.\n\n\n\nSelecting the data:\n\n\n::: {.cell execution_count=9}\n``` {.julia .cell-code}\ndf = filter(\n\trow -> row.Date == date && row.Tree == tree,# && row[\"Age Class\"] == 1,\n\tdf_Medlyn\n);\n```\n:::\n\n\n::: {.cell execution_count=10}\n``` {.julia .cell-code}\ndf_curve_leaf = filter(\n\trow -> row.Date == date && row[\"Leaf Age\"] == 1,\n\tdf_curves\n);\n\n\n```\n:::\n\n\n\nSelect the columns related to the meteorology and add some uncertainty to the measurement:\n\n\n::: {.cell execution_count=11}\n``` {.julia .cell-code}\nmeteo = let\n\tmeteo_df = select(\n\t    df,\n\t\t:date,\n\t    :T => (x -> x ± 0.1) => :T,\n\t    :T => (x -> 40.0 ± 10.0) => :Wind,\n\t    :P => (x -> x ± (0.001 * x)) => :P,\n\t    :Rh => (x -> x ± 0.01) => :Rh,\n\t    :Cₐ => (x -> x ± 10.0) => :Cₐ\n\t)\n\tWeather(meteo_df, (site = \"Tumbarumba\",))\nend;\n\n\n```\n:::\n\n\n\n## Fitting parameters\n\n\n::: {.cell execution_count=12}\n``` {.julia .cell-code}\nbegin\n\tVcMaxRef,JMaxRef,RdRef,TPURef = PlantSimEngine.fit(Fvcb,df_curve_leaf)\n\t# g0,g1 = PlantSimEngine.fit(Medlyn,rename(df_curve_leaf, :gs => :Gₛ))\nend\n\n\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n(VcMaxRef = 70.15156414285369, JMaxRef = 151.8701818252424, RdRef = 0.0, TPURef = 10.84776270014557, Tᵣ = 20.96488505758621)\n```\n:::\n:::\n\n\n\n!!! note\n\t`g0` and `g1` are not fitted because the dataset does not present a Gₛ~VPD curve, and the snap measurements are already used for validation. See the script for an evaluation with a forcing of Gₛ.\n\n\n\n## Simulation\n\nHere we simulate the full energy balance of the leaf and store 5 variables: net carbon assimilation A (μmol m⁻² s⁻¹), transpiration E (mol m⁻² s⁻¹), carbon stomatal conductance Gₛ (mol m⁻² s⁻¹), vapour pressure deficit Dₗ (kPa) and leaf temperature Tₗ (°C).\n\n\n::: {.cell execution_count=13}\n``` {.julia .cell-code}\ndf_sim = let\n\n\tleaf = ModelList(\n\t    energy_balance=Monteith(maxiter=100),\n\t    photosynthesis=Fvcb(VcMaxRef=VcMaxRef, JMaxRef=JMaxRef, RdRef=RdRef, TPURef=TPURef),\n\t    stomatal_conductance=Medlyn(0.01, 3.42),\n\t    status=(\n\t        Rₛ=(df.PPFD ± (0.1 * df.PPFD)) / 4.57, # not / 0.48 because it is in the chamber, the source is only PAR\n\t        sky_fraction=1.0,\n\t        PPFD=df.PPFD ± (0.1 * df.PPFD),\n\t        d=Particles(Uniform(0.01, 0.10))\n\t    ),\n\t    type_promotion=Dict(Float64 => Particles{Float64,2000}),\n\t    variables_check=false\n\t)\n\n\t# Make the simulation:\n\trun!(leaf, meteo)\n\n\t# Extract the outputs:\n\tdf_sim =\n\t\tselect(\n\t\t\tDataFrame(leaf),\n\t\t\t:A => :Asim,\n\t\t\t:λE => (x -> x ./ (meteo[:λ] .* constants.Mₕ₂ₒ) .* 1000.0)  => :Esim,\n\t\t\t:Gₛ => :Gssim,\n\t\t\t:Dₗ => :Dlsim,\n\t\t\t:Tₗ => :Tlsim,\n\t\t\t:PPFD\n\t\t)\n\n\tdf_sim\nend\n\n\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<div><div style = \"float: left;\"><span>6×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">Asim</th><th style = \"text-align: left;\">Esim</th><th style = \"text-align: left;\">Gssim</th><th style = \"text-align: left;\">Dlsim</th><th style = \"text-align: left;\">Tlsim</th><th style = \"text-align: left;\">PPFD</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Particles{Float64, 2000}\" style = \"text-align: left;\">Particle…</th><th title = \"Particles{Float64, 2000}\" style = \"text-align: left;\">Particle…</th><th title = \"Particles{Float64, 2000}\" style = \"text-align: left;\">Particle…</th><th title = \"Particles{Float64, 2000}\" style = \"text-align: left;\">Particle…</th><th title = \"Particles{Float64, 2000}\" style = \"text-align: left;\">Particle…</th><th title = \"Particles{Float64, 2000}\" style = \"text-align: left;\">Particle…</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">6.15 ± 0.53</td><td style = \"text-align: right;\">0.871 ± 0.071</td><td style = \"text-align: right;\">0.121 ± 0.01</td><td style = \"text-align: right;\">0.425 ± 0.018</td><td style = \"text-align: right;\">15.3 ± 0.1</td><td style = \"text-align: right;\">149.0 ± 15.0</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">14.7 ± 0.31</td><td style = \"text-align: right;\">2.37 ± 0.085</td><td style = \"text-align: right;\">0.251 ± 0.0077</td><td style = \"text-align: right;\">0.595 ± 0.053</td><td style = \"text-align: right;\">17.9 ± 0.4</td><td style = \"text-align: right;\">1500.0 ± 150.0</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">14.9 ± 0.45</td><td style = \"text-align: right;\">4.41 ± 0.085</td><td style = \"text-align: right;\">0.186 ± 0.0036</td><td style = \"text-align: right;\">1.44 ± 0.063</td><td style = \"text-align: right;\">25.4 ± 0.3</td><td style = \"text-align: right;\">1510.0 ± 150.0</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">15.1 ± 0.38</td><td style = \"text-align: right;\">4.01 ± 0.076</td><td style = \"text-align: right;\">0.192 ± 0.0031</td><td style = \"text-align: right;\">1.27 ± 0.056</td><td style = \"text-align: right;\">22.0 ± 0.32</td><td style = \"text-align: right;\">1500.0 ± 150.0</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5.54 ± 0.49</td><td style = \"text-align: right;\">1.73 ± 0.13</td><td style = \"text-align: right;\">0.0723 ± 0.0057</td><td style = \"text-align: right;\">1.38 ± 0.03</td><td style = \"text-align: right;\">22.2 ± 0.12</td><td style = \"text-align: right;\">149.0 ± 15.0</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">7.15 ± 0.62</td><td style = \"text-align: right;\">1.86 ± 0.14</td><td style = \"text-align: right;\">0.0958 ± 0.0078</td><td style = \"text-align: right;\">1.13 ± 0.03</td><td style = \"text-align: right;\">22.7 ± 0.12</td><td style = \"text-align: right;\">199.0 ± 20.0</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n\nWe also make a simulation forcing the stomatal conductance to the measurement:\n\n\n::: {.cell execution_count=14}\n``` {.julia .cell-code}\ndf_sim_forcedGs = let\n    leaf = ModelList(\n        Monteith(maxiter=100),\n        Fvcb(VcMaxRef=VcMaxRef, JMaxRef=JMaxRef, RdRef=RdRef, TPURef=TPURef),\n        ForcedGs(),\n        status=(\n            Rₛ=(df.PPFD ± (0.1 * df.PPFD)) / 4.57,\n            sky_fraction=1.0,\n            PPFD=df.PPFD ± (0.1 * df.PPFD),\n            d=Particles(Uniform(0.01, 0.10)),\n            Gₛ=df.Gₛ ± 0.0,\n        ),\n        type_promotion=Dict(Float64 => Particles{Float64,2000}),\n        variables_check=false,\n    )\n\n    # Make the simulation:\n    run!(leaf, meteo)\n\n    # Extract the outputs:\n    df_ = select(\n        DataFrame(leaf),\n        :A => :Asim,\n        :λE => (x -> x ./ (meteo[:λ] .* constants.Mₕ₂ₒ) .* 1000.0) => :Esim,\n        :Gₛ => :Gssim,\n        :Dₗ => :Dlsim,\n        :Tₗ => :Tlsim,\n        :PPFD,\n    )\n    df_\nend\n\n\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div><div style = \"float: left;\"><span>6×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">Asim</th><th style = \"text-align: left;\">Esim</th><th style = \"text-align: left;\">Gssim</th><th style = \"text-align: left;\">Dlsim</th><th style = \"text-align: left;\">Tlsim</th><th style = \"text-align: left;\">PPFD</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Particles{Float64, 2000}\" style = \"text-align: left;\">Particle…</th><th title = \"Particles{Float64, 2000}\" style = \"text-align: left;\">Particle…</th><th title = \"Particles{Float64, 2000}\" style = \"text-align: left;\">Particle…</th><th title = \"Particles{Float64, 2000}\" style = \"text-align: left;\">Particle…</th><th title = \"Particles{Float64, 2000}\" style = \"text-align: left;\">Particle…</th><th title = \"Particles{Float64, 2000}\" style = \"text-align: left;\">Particle…</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">6.4 ± 0.56</td><td style = \"text-align: right;\">1.35 ± 0.071</td><td style = \"text-align: right;\">0.199</td><td style = \"text-align: right;\">0.413 ± 0.017</td><td style = \"text-align: right;\">15.2 ± 0.11</td><td style = \"text-align: right;\">150.0 ± 15.0</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">16.6 ± 0.34</td><td style = \"text-align: right;\">2.45 ± 0.14</td><td style = \"text-align: right;\">0.261 ± 2.8e-16</td><td style = \"text-align: right;\">0.593 ± 0.051</td><td style = \"text-align: right;\">17.8 ± 0.38</td><td style = \"text-align: right;\">1500.0 ± 150.0</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">19.2 ± 0.49</td><td style = \"text-align: right;\">4.81 ± 0.14</td><td style = \"text-align: right;\">0.208</td><td style = \"text-align: right;\">1.42 ± 0.058</td><td style = \"text-align: right;\">25.3 ± 0.28</td><td style = \"text-align: right;\">1510.0 ± 150.0</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">18.8 ± 0.42</td><td style = \"text-align: right;\">1.99 ± 0.082</td><td style = \"text-align: right;\">0.0858</td><td style = \"text-align: right;\">1.35 ± 0.072</td><td style = \"text-align: right;\">22.5 ± 0.42</td><td style = \"text-align: right;\">1500.0 ± 150.0</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">6.04 ± 0.53</td><td style = \"text-align: right;\">1.95 ± 0.056</td><td style = \"text-align: right;\">0.0822</td><td style = \"text-align: right;\">1.37 ± 0.03</td><td style = \"text-align: right;\">22.1 ± 0.13</td><td style = \"text-align: right;\">150.0 ± 14.0</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">7.75 ± 0.66</td><td style = \"text-align: right;\">1.25 ± 0.033</td><td style = \"text-align: right;\">0.0618</td><td style = \"text-align: right;\">1.16 ± 0.028</td><td style = \"text-align: right;\">22.8 ± 0.1</td><td style = \"text-align: right;\">200.0 ± 20.0</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n\n## Plotting results\n\n\n::: {.cell execution_count=15}\n``` {.julia .cell-code}\n\"\"\"\n\tplot_var(ax, var_meas, var_sim)\n\nMake a plot for one variable.\n\n#### Arguments\n\n- `ax`: the figure axis\n- `var_meas`: measured variable\n- `var_sim`: simulated variable\n\"\"\"\nfunction plot_var(ax, var_meas, var_sim)\n    line_color = Colors.RGB(([67, 101, 139] ./ 255)...)\n    error_color = line_color\n    point_color = Colors.RGB(253 / 255, 100 / 255, 103 / 255)\n    point_fill = Colors.RGBA(253 / 255, 100 / 255, 103 / 255, 0.5)\n\n    scatter!(\n        ax,\n        var_meas,\n        color=point_fill,\n        markersize=12,\n        label=\"Measurement\",\n        strokecolor=point_color,\n        strokewidth=3\n    )\n\n    lines!(\n        ax,\n        pmean.(var_sim),\n        color=line_color,\n        linewidth=2.5,\n        label=\"Simulation ± 95% confidence interval\"\n    )\n\n    errorbars!(\n        ax,\n        eachindex(var_sim),\n        pmean.(var_sim),\n        pstd.(var_sim),\n        pstd.(var_sim),\n        color=error_color,\n        whiskerwidth=5,\n        linewidth=2\n    )\nend\n\n\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\nplot_var\n```\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.julia .cell-code}\nlet\n    noto_sans = assetpath(\"fonts\", \"NotoSans-Regular.ttf\")\n    x_labs = (eachindex(df.Tlsim), Dates.format.(df.Time, dateformat\"HH:MM\"))\n    # size_inches = (6.7, 5)\n    size_inches = (10, 7)\n\tsize_pt = 72 .* size_inches\n    fig = Figure(\n        font=noto_sans,\n        resolution=size_pt,\n        fontsize=12,\n        xminorgridstyle=true\n    )\n\n    ga = fig[1, 1] = GridLayout()\n\n    # axDl = Axis(ga[1, 1], ylabel=\"Dₗ (kPa)\")\n    # plot_var(axDl, df.Dₗ, df_sim.Dlsim)\n    axDl = Axis(ga[1, 1], ylabel=\"Gₛ (mol m⁻² s⁻¹)\")\n    plot_var(axDl, df.Gₛ, df_sim.Gssim)\n\n    axTl = Axis(ga[1, 2], ylabel=\"Tₗ (°C)\")\n    plot_var(axTl, df.Tₗ, df_sim.Tlsim)\n\n    hidexdecorations!(axDl, grid=false)\n    hidexdecorations!(axTl, grid=false)\n\n    axA = Axis(ga[2, 1], xlabel=\"Time (HH:MM)\", ylabel=\"A (μmol m⁻² s⁻¹)\")\n    axA.xticks = deepcopy(x_labs)\n    plot_var(axA, df.A, df_sim.Asim)\n\n    axE = Axis(ga[2, 2], xlabel=\"Time (HH:MM)\", ylabel=\"Tr (mol m⁻² s⁻¹)\")\n    axE.xticks = deepcopy(x_labs)\n    plot_var(axE, df.Trmmol, df_sim.Esim)\n\n    rowgap!(ga, 10)\n    Legend(fig[2, 1], axDl, orientation=:horizontal, framevisible=false, padding=0.0)\n    fig\nend\n\n\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n![](Fig6_PlantBiophysics_day_evaluation_files/figure-html/cell-17-output-1.svg){}\n:::\n:::\n\n\n\n*Figure 1. Measurement and simulation of the leaf-to-air vapor pressure deficit (Dₗ), leaf temperature (Tₗ), carbon assimilation (A) and transpiration (Tr) of a leaf in snap measurements from Medlyn et al. (2015). The photosynthesis is simulated using the model from Farquhar et al. (1980) with the analytical resolution proposed by Leuning et al. (1995) and fitted on A-Cᵢ curves data. The energy balance is simulated using the model of Monteith et al. (2013) corrected by Schymanski et al. (2017). The stomatal conductance is simulated using the model of Medlyn et al. (2011) with forced parameter fitted to match the snap measurements.*\n\n\n\nForcing `Gₛ` would give results such as:\n\n\n::: {.cell execution_count=17}\n``` {.julia .cell-code}\nfig = let\n    noto_sans = assetpath(\"fonts\", \"NotoSans-Regular.ttf\")\n    x_labs = (eachindex(df.Tlsim), Dates.format.(df.Time, dateformat\"HH:MM\"))\n    # size_inches = (6.7, 5)\n    size_inches = (10, 7)\n    size_pt = 72 .* size_inches\n    fig = Figure(font=noto_sans, resolution=size_pt, fontsize=12, xminorgridstyle=true)\n\n    ga = fig[1, 1] = GridLayout()\n\n    axDl = Axis(ga[1, 1], ylabel=\"Dₗ (kPa)\")\n    plot_var(axDl, df.Dₗ, df_sim_forcedGs.Dlsim)\n    # axDl = Axis(ga[1, 1], ylabel=\"Gₛ (mol m⁻² s⁻¹)\")\n    # plot_var(axDl, df.Gₛ, df_sim.Gssim)\n\n    axTl = Axis(ga[1, 2], ylabel=\"Tₗ (°C)\")\n    plot_var(axTl, df.Tₗ, df_sim_forcedGs.Tlsim)\n\n    hidexdecorations!(axDl, grid=false)\n    hidexdecorations!(axTl, grid=false)\n\n    axA = Axis(ga[2, 1], xlabel=\"Time (HH:MM)\", ylabel=\"A (μmol m⁻² s⁻¹)\")\n    axA.xticks = deepcopy(x_labs)\n    plot_var(axA, df.A, df_sim_forcedGs.Asim)\n\n    axE = Axis(ga[2, 2], xlabel=\"Time (HH:MM)\", ylabel=\"Tr (mol m⁻² s⁻¹)\")\n    axE.xticks = deepcopy(x_labs)\n    plot_var(axE, df.Trmmol, df_sim_forcedGs.Esim)\n\n    rowgap!(ga, 10)\n    Legend(fig[2, 1], axDl, orientation=:horizontal, framevisible=false, padding=0.0)\n    fig\nend\n\n\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n![](Fig6_PlantBiophysics_day_evaluation_files/figure-html/cell-18-output-1.svg){}\n:::\n:::\n\n\n\n*Figure 2. Measurement and simulation of the leaf-to-air vapor pressure deficit (Dₗ), leaf temperature (Tₗ), carbon assimilation (A) and transpiration (Tr) of a leaf in snap measurements from Medlyn et al. (2015). The photosynthesis is simulated using the model from Farquhar et al. (1980) with the analytical resolution proposed by Leuning et al. (1995) and fitted on A-Cᵢ curves data. The energy balance is simulated using the model of Monteith et al. (2013) corrected by Schymanski et al. (2017). The stomatal conductance is forced.*\n\n\n::: {.cell execution_count=18}\n``` {.julia .cell-code}\nsave(\"figure_day.png\", fig, px_per_unit=3);\n\n\n```\n:::\n\n\n\n## Statistics\n\n\n::: {.cell execution_count=19}\n``` {.julia .cell-code}\n\"\"\"\n    nRMSE(obs,sim)\n\nReturns the normalized Root Mean Squared Error between observations `obs` and simulations `sim`.\nThe closer to 0 the better.\n\"\"\"\nfunction nRMSE(obs, sim; digits=2)\n    return round(sqrt(sum((obs .- sim) .^ 2) / length(obs)) / (findmax(obs)[1] - findmin(obs)[1]), digits=digits)\nend\n\n\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\nnRMSE\n```\n:::\n:::\n\n\n::: {.cell execution_count=20}\n``` {.julia .cell-code}\n\"\"\"\n\t    Bias(obs,sim)\n\n\tReturns the bias between observations `obs` and simulations `sim`.\n\tThe closer to 0 the better.\n\t\"\"\"\nfunction Bias(obs, sim, digits=4)\n    return round(mean(sim .- obs), digits=digits)\nend\n\n\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\nBias\n```\n:::\n:::\n\n\n::: {.cell execution_count=21}\n``` {.julia .cell-code}\n\"\"\"\n\tnBias(obs,sim; digits = 2)\n\nReturns the normalised bias (%) between observations `obs` and simulations `sim`.\nThe closer to 0 the better.\n\"\"\"\nfunction nBias(obs, sim; digits=2)\n    return round(mean((sim .- obs)) / (findmax(obs)[1] - findmin(obs)[1]), digits=digits)\nend\n\n\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\nnBias\n```\n:::\n:::\n\n\n::: {.cell execution_count=22}\n``` {.julia .cell-code}\n\"\"\"\n    EF(obs,sim)\n\nReturns the Efficiency Factor between observations `obs` and simulations `sim` using NSE (Nash-Sutcliffe efficiency) model.\nMore information can be found at https://en.wikipedia.org/wiki/Nash%E2%80%93Sutcliffe_model_efficiency_coefficient.\nThe closer to 1 the better.\n\"\"\"\nfunction EF(obs, sim, digits=2)\n    SSres = sum((obs - sim) .^ 2)\n    SStot = sum((obs .- mean(obs)) .^ 2)\n    return round(1 - SSres / SStot, digits=digits)\nend\n\n\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\nEF\n```\n:::\n:::\n\n\n::: {.cell execution_count=23}\n``` {.julia .cell-code}\nlet\n\tdf_vec = []\n\tvars = [:Dₗ, :Tₗ, :A, :Tr]\n\tfor var in [df.Dₗ => df_sim_forcedGs.Dlsim, df.Tₗ => df_sim_forcedGs.Tlsim, df.A => df_sim_forcedGs.Asim, df.Trmmol => df_sim_forcedGs.Esim]\n\t\tvar_ = popfirst!(vars)\n\t\tvar_vec = Any[:variable => var_]\n\t\tfor fn in [RMSE, nRMSE, EF, Bias, nBias]\n\t\t\tpush!(var_vec, Symbol(fn) => fn(var.first, var.second))\n\t\tend\n\tpush!(df_vec, (;var_vec...))\n\tend\n\n\tDataFrame(df_vec)\nend\n\n\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```{=html}\n<div><div style = \"float: left;\"><span>4×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">variable</th><th style = \"text-align: left;\">RMSE</th><th style = \"text-align: left;\">nRMSE</th><th style = \"text-align: left;\">EF</th><th style = \"text-align: left;\">Bias</th><th style = \"text-align: left;\">nBias</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Symbol\" style = \"text-align: left;\">Symbol</th><th title = \"Particles{Float64, 2000}\" style = \"text-align: left;\">Particle…</th><th title = \"Particles{Float64, 2000}\" style = \"text-align: left;\">Particle…</th><th title = \"Particles{Float64, 2000}\" style = \"text-align: left;\">Particle…</th><th title = \"Particles{Float64, 2000}\" style = \"text-align: left;\">Particle…</th><th title = \"Particles{Float64, 2000}\" style = \"text-align: left;\">Particle…</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">Dₗ</td><td style = \"text-align: right;\">0.0981 ± 0.024</td><td style = \"text-align: right;\">0.107 ± 0.026</td><td style = \"text-align: right;\">0.926 ± 0.039</td><td style = \"text-align: right;\">0.0784 ± 0.024</td><td style = \"text-align: right;\">0.085 ± 0.026</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">Tₗ</td><td style = \"text-align: right;\">0.56 ± 0.13</td><td style = \"text-align: right;\">0.0582 ± 0.014</td><td style = \"text-align: right;\">0.968 ± 0.017</td><td style = \"text-align: right;\">0.469 ± 0.14</td><td style = \"text-align: right;\">0.0487 ± 0.015</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: left;\">A</td><td style = \"text-align: right;\">2.06 ± 0.2</td><td style = \"text-align: right;\">0.141 ± 0.014</td><td style = \"text-align: right;\">0.864 ± 0.027</td><td style = \"text-align: right;\">0.191 ± 0.21</td><td style = \"text-align: right;\">0.0131 ± 0.014</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: left;\">Tr</td><td style = \"text-align: right;\">0.202 ± 0.051</td><td style = \"text-align: right;\">0.0617 ± 0.016</td><td style = \"text-align: right;\">0.963 ± 0.019</td><td style = \"text-align: right;\">0.141 ± 0.034</td><td style = \"text-align: right;\">0.0432 ± 0.011</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n\n# References\n\n\n\nFarquhar, G. D., S. von von Caemmerer, et J. A. Berry. 1980. « A biochemical model of\nphotosynthetic CO2 assimilation in leaves of C3 species ». Planta 149 (1): 78‑90.\n\nLeuning, R., F. M. Kelliher, DGG de Pury, et E.D. Schulze. 1995. « Leaf nitrogen,\nphotosynthesis, conductance and transpiration: scaling from leaves to canopies ». Plant,\nCell & Environment 18 (10): 1183‑1200.\n\nMedlyn, Belinda E., Remko A. Duursma, Derek Eamus, David S. Ellsworth, I. Colin Prentice, Craig V. M. Barton, Kristine Y. Crous, Paolo De Angelis, Michael Freeman, et Lisa Wingate. 2011. « Reconciling the optimal and empirical approaches to modelling stomatal conductance ». Global Change Biology 17 (6): 2134‑44. https://doi.org/10.1111/j.1365-2486.2010.02375.x.\n\nMedlyn, Belinda; Pepper, David; Heather Keith (2015): Tumbarumba Gas Exchange. figshare. Dataset. https://doi.org/10.6084/m9.figshare.1538079.v1\n\nMonteith, John L., et Mike H. Unsworth. 2013. « Chapter 13 - Steady-State Heat Balance: (i)\nWater Surfaces, Soil, and Vegetation ». In Principles of Environmental Physics (Fourth Edition),\nedited by John L. Monteith et Mike H. Unsworth, 217‑47. Boston: Academic Press.\n\nSchymanski, Stanislaus J., et Dani Or. 2017. « Leaf-Scale Experiments Reveal an Important\nOmission in the Penman–Monteith Equation ». Hydrology and Earth System Sciences 21 (2): 685‑706.\nhttps://doi.org/10.5194/hess-21-685-2017.\n\n\n\n",
    "supporting": [
      "Fig6_PlantBiophysics_day_evaluation_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}